<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/BookingForm/BookingForm.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/BookingForm/BookingForm.js" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;&#10;export default function BookingForm({ availableTimes, updateTimes }) {&#10;    const [date, setDate] = useState('');&#10;    const [time, setTime] = useState('');&#10;    const [guests, setGuests] = useState(1);&#10;    const [occasion, setOccasion] = useState('Birthday');&#10;&#10;    const handleDateChange = (e) =&gt; {&#10;        const newDate = e.target.value;&#10;        setDate(newDate);&#10;        // Dispatch date change to update availableTimes with the correct action format&#10;        updateTimes({ type: 'dateChange', date: newDate });&#10;    };&#10;&#10;    return (&#10;        &lt;form style={{ display: &quot;grid&quot;, maxWidth: &quot;200px&quot;, gap: &quot;20px&quot; }} aria-label=&quot;Table reservation form&quot;&gt;&#10;            &lt;label htmlFor=&quot;res-date&quot;&gt;Choose date&lt;/label&gt;&#10;            &lt;input&#10;                type=&quot;date&quot;&#10;                id=&quot;res-date&quot;&#10;                value={date}&#10;                onChange={handleDateChange}&#10;                aria-label=&quot;Choose reservation date&quot;&#10;                aria-required=&quot;true&quot;&#10;                aria-describedby=&quot;date-help&quot;&#10;            /&gt;&#10;            &lt;label htmlFor=&quot;res-time&quot;&gt;Choose time&lt;/label&gt;&#10;            &lt;select&#10;                id=&quot;res-time&quot;&#10;                name=&quot;res-time&quot;&#10;                value={time}&#10;                onChange={(e) =&gt; setTime(e.target.value)}&#10;                aria-label=&quot;Choose reservation time&quot;&#10;                aria-required=&quot;true&quot;&#10;                aria-describedby=&quot;time-help&quot;&#10;            &gt;&#10;                &lt;option value=&quot;&quot;&gt;Select a time&lt;/option&gt;&#10;                {availableTimes.map((timeOption) =&gt; (&#10;                    &lt;option key={timeOption} value={timeOption}&gt;&#10;                        {timeOption}&#10;                    &lt;/option&gt;&#10;                ))}&#10;            &lt;/select&gt;&#10;            &lt;label htmlFor=&quot;guests&quot;&gt;Number of guests&lt;/label&gt;&#10;            &lt;input&#10;                type=&quot;number&quot;&#10;                placeholder=&quot;1&quot;&#10;                min=&quot;1&quot;&#10;                max=&quot;10&quot;&#10;                id=&quot;guests&quot;&#10;                value={guests}&#10;                onChange={(e) =&gt; setGuests(parseInt(e.target.value))}&#10;                aria-label=&quot;Number of guests, minimum 1, maximum 10&quot;&#10;                aria-required=&quot;true&quot;&#10;                aria-describedby=&quot;guests-help&quot;&#10;            /&gt;&#10;            &lt;label htmlFor=&quot;occasion&quot;&gt;Occasion&lt;/label&gt;&#10;            &lt;select&#10;                id=&quot;occasion&quot;&#10;                value={occasion}&#10;                onChange={(e) =&gt; setOccasion(e.target.value)}&#10;                aria-label=&quot;Select occasion for reservation&quot;&#10;                aria-describedby=&quot;occasion-help&quot;&#10;            &gt;&#10;                &lt;option value=&quot;Birthday&quot;&gt;Birthday&lt;/option&gt;&#10;                &lt;option value=&quot;Anniversary&quot;&gt;Anniversary&lt;/option&gt;&#10;            &lt;/select&gt;&#10;            &lt;input&#10;                type=&quot;submit&quot;&#10;                className=&quot;btn btn-primary&quot;&#10;                value=&quot;Make Your reservation&quot;&#10;                aria-label=&quot;Submit reservation form&quot;&#10;            /&gt;&#10;        &lt;/form&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;&#10;export default function BookingForm({ availableTimes, updateTimes, onSubmit }) {&#10;    const [date, setDate] = useState('');&#10;    const [time, setTime] = useState('');&#10;    const [guests, setGuests] = useState(1);&#10;    const [occasion, setOccasion] = useState('Birthday');&#10;    const [bookings, setBookings] = useState(() =&gt; {&#10;        const stored = localStorage.getItem('bookings');&#10;        return stored ? JSON.parse(stored) : [];&#10;    });&#10;&#10;    const handleDateChange = (e) =&gt; {&#10;        const newDate = e.target.value;&#10;        setDate(newDate);&#10;        // Dispatch date change to update availableTimes with the correct action format&#10;        updateTimes({ type: 'dateChange', date: newDate });&#10;    };&#10;&#10;    const handleSubmit = (e) =&gt; {&#10;        e.preventDefault();&#10;        const newBooking = { date, time, guests, occasion };&#10;        const updatedBookings = [...bookings, newBooking];&#10;        setBookings(updatedBookings);&#10;        localStorage.setItem('bookings', JSON.stringify(updatedBookings));&#10;        if (onSubmit) {&#10;            onSubmit(newBooking);&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;form&#10;            style={{ display: &quot;grid&quot;, maxWidth: &quot;200px&quot;, gap: &quot;20px&quot; }}&#10;            aria-label=&quot;Table reservation form&quot;&#10;            onSubmit={handleSubmit}&#10;        &gt;&#10;            &lt;label htmlFor=&quot;res-date&quot;&gt;Choose date&lt;/label&gt;&#10;            &lt;input&#10;                type=&quot;date&quot;&#10;                id=&quot;res-date&quot;&#10;                value={date}&#10;                onChange={handleDateChange}&#10;                aria-label=&quot;Choose reservation date&quot;&#10;                aria-required=&quot;true&quot;&#10;                aria-describedby=&quot;date-help&quot;&#10;            /&gt;&#10;            &lt;label htmlFor=&quot;res-time&quot;&gt;Choose time&lt;/label&gt;&#10;            &lt;select&#10;                id=&quot;res-time&quot;&#10;                name=&quot;res-time&quot;&#10;                value={time}&#10;                onChange={(e) =&gt; setTime(e.target.value)}&#10;                aria-label=&quot;Choose reservation time&quot;&#10;                aria-required=&quot;true&quot;&#10;                aria-describedby=&quot;time-help&quot;&#10;            &gt;&#10;                &lt;option value=&quot;&quot;&gt;Select a time&lt;/option&gt;&#10;                {availableTimes.map((timeOption) =&gt; (&#10;                    &lt;option key={timeOption} value={timeOption}&gt;&#10;                        {timeOption}&#10;                    &lt;/option&gt;&#10;                ))}&#10;            &lt;/select&gt;&#10;            &lt;label htmlFor=&quot;guests&quot;&gt;Number of guests&lt;/label&gt;&#10;            &lt;input&#10;                type=&quot;number&quot;&#10;                placeholder=&quot;1&quot;&#10;                min=&quot;1&quot;&#10;                max=&quot;10&quot;&#10;                id=&quot;guests&quot;&#10;                value={guests}&#10;                onChange={(e) =&gt; setGuests(parseInt(e.target.value))}&#10;                aria-label=&quot;Number of guests, minimum 1, maximum 10&quot;&#10;                aria-required=&quot;true&quot;&#10;                aria-describedby=&quot;guests-help&quot;&#10;            /&gt;&#10;            &lt;label htmlFor=&quot;occasion&quot;&gt;Occasion&lt;/label&gt;&#10;            &lt;select&#10;                id=&quot;occasion&quot;&#10;                value={occasion}&#10;                onChange={(e) =&gt; setOccasion(e.target.value)}&#10;                aria-label=&quot;Select occasion for reservation&quot;&#10;                aria-describedby=&quot;occasion-help&quot;&#10;            &gt;&#10;                &lt;option value=&quot;Birthday&quot;&gt;Birthday&lt;/option&gt;&#10;                &lt;option value=&quot;Anniversary&quot;&gt;Anniversary&lt;/option&gt;&#10;            &lt;/select&gt;&#10;            &lt;input&#10;                type=&quot;submit&quot;&#10;                className=&quot;btn btn-primary&quot;&#10;                value=&quot;Make Your reservation&quot;&#10;                aria-label=&quot;Submit reservation form&quot;&#10;            /&gt;&#10;        &lt;/form&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/BookingForm/BookingForm.test.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/BookingForm/BookingForm.test.js" />
              <option name="updatedContent" value="import React from 'react';&#10;import { render, fireEvent } from '@testing-library/react';&#10;import BookingForm from './BookingForm';&#10;&#10;describe('BookingForm bookings state', () =&gt; {&#10;  beforeEach(() =&gt; {&#10;    localStorage.clear();&#10;  });&#10;&#10;  it('initializes bookings state from localStorage', () =&gt; {&#10;    localStorage.setItem('bookings', JSON.stringify([{ date: '2025-07-28', time: '18:00', guests: 2, occasion: 'Birthday' }]));&#10;    const { getByLabelText } = render(&#10;      &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;    // bookings state is not directly accessible, but localStorage should have the initial value&#10;    expect(JSON.parse(localStorage.getItem('bookings'))).toHaveLength(1);&#10;  });&#10;&#10;  it('adds a booking to bookings state and localStorage on submit', () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    const { getByLabelText, getByDisplayValue } = render(&#10;      &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={mockOnSubmit} /&gt;&#10;    );&#10;    fireEvent.change(getByLabelText(/Choose date/i), { target: { value: '2025-07-28' } });&#10;    fireEvent.change(getByLabelText(/Choose reservation time/i), { target: { value: '18:00' } });&#10;    fireEvent.change(getByLabelText(/Number of guests/i), { target: { value: '3' } });&#10;    fireEvent.change(getByLabelText(/Select occasion/i), { target: { value: 'Anniversary' } });&#10;    fireEvent.click(getByDisplayValue(/Make Your reservation/i));&#10;    const bookings = JSON.parse(localStorage.getItem('bookings'));&#10;    expect(bookings).toHaveLength(1);&#10;    expect(bookings[0]).toEqual({ date: '2025-07-28', time: '18:00', guests: 3, occasion: 'Anniversary' });&#10;    expect(mockOnSubmit).toHaveBeenCalledWith({ date: '2025-07-28', time: '18:00', guests: 3, occasion: 'Anniversary' });&#10;  });&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/BookingPage.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/BookingPage.js" />
              <option name="originalContent" value="/* global fetchAPI, submitAPI */&#10;import &quot;./BookingPage.css&quot;;&#10;import Main from &quot;../components/Main/Main&quot;;&#10;import BookingForm from &quot;../components/BookingForm/BookingForm&quot;;&#10;import { useReducer } from &quot;react&quot;;&#10;&#10;export function initializeTimes() {&#10;    // Get today's date&#10;    const today = new Date();&#10;    // Use the fetchAPI to get available times for today&#10;    return fetchAPI(today) || [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;}&#10;&#10;export function updateTimes(state, action) {&#10;    if (action.type === 'dateChange') {&#10;        // Convert the date string to a Date object&#10;        const selectedDate = new Date(action.date);&#10;        // Use fetchAPI to get available times for the selected date&#10;        return fetchAPI(selectedDate) || [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    }&#10;    return state;&#10;}&#10;&#10;export default function BookingPage() {&#10;    const [availableTimes, dispatch] = useReducer(updateTimes, [], initializeTimes);&#10;&#10;    const handleFormSubmit = (formData) =&gt; {&#10;        // Use the submitAPI function to submit the form data&#10;        const success = submitAPI(formData);&#10;        if (success) {&#10;            // Handle successful submission (e.g., redirect to confirmation page)&#10;            console.log('Form submitted successfully:', formData);&#10;            // In a real app, you might redirect here&#10;            // history.push('/confirmation');&#10;        } else {&#10;            // Handle submission failure&#10;            console.error('Form submission failed');&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;Main&gt;&#10;            &lt;section className=&quot;booking-page bg-secondary&quot;&gt;&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;div className=&quot;row&quot;&gt;&#10;                        &lt;div className=&quot;col-12 col-md-6&quot;&gt;&#10;                            &lt;div className=&quot;heading&quot;&gt;&#10;                                &lt;h1&gt;Reserve a table&lt;/h1&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;BookingForm&#10;                                availableTimes={availableTimes}&#10;                                updateTimes={dispatch}&#10;                                onSubmit={handleFormSubmit}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;        &lt;/Main&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="/* global fetchAPI, submitAPI */&#10;import &quot;./BookingPage.css&quot;;&#10;import Main from &quot;../components/Main/Main&quot;;&#10;import BookingForm from &quot;../components/BookingForm/BookingForm&quot;;&#10;import { useReducer } from &quot;react&quot;;&#10;import { useNavigate } from &quot;react-router-dom&quot;;&#10;&#10;export function initializeTimes() {&#10;    // Get today's date&#10;    const today = new Date();&#10;    // Use the fetchAPI to get available times for today&#10;    return fetchAPI(today) || [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;}&#10;&#10;export function updateTimes(state, action) {&#10;    if (action.type === 'dateChange') {&#10;        // Convert the date string to a Date object&#10;        const selectedDate = new Date(action.date);&#10;        // Use fetchAPI to get available times for the selected date&#10;        return fetchAPI(selectedDate) || [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    }&#10;    return state;&#10;}&#10;&#10;export default function BookingPage() {&#10;    const [availableTimes, dispatch] = useReducer(updateTimes, [], initializeTimes);&#10;    const navigate = useNavigate();&#10;&#10;    const submitForm = (formData) =&gt; {&#10;        const success = submitAPI(formData);&#10;        if (success) {&#10;            navigate(&quot;/reservations/confirmed&quot;);&#10;        } else {&#10;            console.error('Form submission failed');&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;Main&gt;&#10;            &lt;section className=&quot;booking-page bg-secondary&quot;&gt;&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;div className=&quot;row&quot;&gt;&#10;                        &lt;div className=&quot;col-12 col-md-6&quot;&gt;&#10;                            &lt;div className=&quot;heading&quot;&gt;&#10;                                &lt;h1&gt;Reserve a table&lt;/h1&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;BookingForm&#10;                                availableTimes={availableTimes}&#10;                                updateTimes={dispatch}&#10;                                onSubmit={submitForm}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;        &lt;/Main&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/BookingPage.test.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/BookingPage.test.js" />
              <option name="originalContent" value="import { render, screen, fireEvent } from &quot;@testing-library/react&quot;;&#10;import BookingForm from &quot;../components/BookingForm/BookingForm&quot;;&#10;import BookingPage from &quot;./BookingPage&quot;;&#10;import { initializeTimes, updateTimes } from &quot;./BookingPage&quot;;&#10;&#10;// Mock the API functions&#10;const mockFetchAPI = jest.fn().mockImplementation(date =&gt; {&#10;    return [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;});&#10;&#10;const mockSubmitAPI = jest.fn().mockImplementation(formData =&gt; {&#10;    return true; // Always succeed in tests&#10;});&#10;&#10;// Set up the mock API globally for all tests&#10;beforeAll(() =&gt; {&#10;    window.fetchAPI = mockFetchAPI;&#10;    window.submitAPI = mockSubmitAPI;&#10;});&#10;&#10;// Clean up mocks after all tests&#10;afterAll(() =&gt; {&#10;    delete window.fetchAPI;&#10;    delete window.submitAPI;&#10;});&#10;&#10;// Reset mock function calls between tests&#10;beforeEach(() =&gt; {&#10;    mockFetchAPI.mockClear();&#10;    mockSubmitAPI.mockClear();&#10;});&#10;&#10;// Test that BookingPage renders with the correct heading&#10;test('Renders the BookingPage heading', () =&gt; {&#10;    render(&lt;BookingPage /&gt;);&#10;    const headingElement = screen.getByText(&quot;Reserve a table&quot;);&#10;    expect(headingElement).toBeInTheDocument();&#10;    // Verify that fetchAPI was called during initialization&#10;    expect(mockFetchAPI).toHaveBeenCalled();&#10;});&#10;&#10;// Original test for BookingForm&#10;test('Renders the BookingForm heading with times', () =&gt; {&#10;    const mockAvailableTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    const mockUpdateTimes = jest.fn();&#10;&#10;    render(&#10;        &lt;BookingForm&#10;            availableTimes={mockAvailableTimes}&#10;            updateTimes={mockUpdateTimes}&#10;        /&gt;&#10;    );&#10;    const headingElement = screen.getByLabelText(&quot;Choose reservation date&quot;);&#10;    expect(headingElement).toBeInTheDocument();&#10;})&#10;&#10;// Test for initializeTimes function&#10;test('initializeTimes returns the expected time slots from API', () =&gt; {&#10;    // Call the function&#10;    const times = initializeTimes();&#10;&#10;    // Expected array of time slots&#10;    const expectedTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;&#10;    // Check if the returned array matches the expected array&#10;    expect(times).toEqual(expectedTimes);&#10;&#10;    // Check if the array has the correct length&#10;    expect(times.length).toBe(6);&#10;&#10;    // Verify that the API was called&#10;    expect(mockFetchAPI).toHaveBeenCalled();&#10;});&#10;&#10;// Test for updateTimes function&#10;test('updateTimes returns API data when action type is dateChange', () =&gt; {&#10;    // Create a mock state&#10;    const mockState = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;];&#10;&#10;    // Create a dateChange action&#10;    const mockAction = { type: 'dateChange', date: '2023-07-15' };&#10;&#10;    // Call the function with the state and action&#10;    const newState = updateTimes(mockState, mockAction);&#10;&#10;    // Since fetchAPI returns our mock data, we should get these times&#10;    const expectedTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    expect(newState).toEqual(expectedTimes);&#10;&#10;    // Verify that the API was called with a Date object&#10;    expect(mockFetchAPI).toHaveBeenCalledWith(expect.any(Date));&#10;});&#10;&#10;// Test for form submission&#10;test('BookingForm can be submitted by user', () =&gt; {&#10;    const mockAvailableTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    const mockUpdateTimes = jest.fn();&#10;    const mockSubmit = jest.fn();&#10;&#10;    // Render form with a mock submission handler&#10;    render(&#10;        &lt;BookingForm&#10;            availableTimes={mockAvailableTimes}&#10;            updateTimes={mockUpdateTimes}&#10;            onSubmit={mockSubmit}&#10;        /&gt;&#10;    );&#10;&#10;    // Fill out form fields&#10;    const dateInput = screen.getByLabelText(&quot;Choose reservation date&quot;);&#10;    fireEvent.change(dateInput, { target: { value: '2023-09-20' } });&#10;&#10;    const timeSelect = screen.getByLabelText(&quot;Choose reservation time&quot;);&#10;    fireEvent.change(timeSelect, { target: { value: '19:00' } });&#10;&#10;    const guestsInput = screen.getByLabelText(&quot;Number of guests, minimum 1, maximum 10&quot;);&#10;    fireEvent.change(guestsInput, { target: { value: '4' } });&#10;&#10;    const occasionSelect = screen.getByLabelText(&quot;Select occasion for reservation&quot;);&#10;    fireEvent.change(occasionSelect, { target: { value: 'Anniversary' } });&#10;&#10;    // Submit the form&#10;    const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;    fireEvent.click(submitButton);&#10;&#10;    // Check if the submit handler was called&#10;    expect(mockSubmit).toHaveBeenCalledTimes(1);&#10;    // Check if it was called with the correct form data&#10;    expect(mockSubmit).toHaveBeenCalledWith({&#10;        date: '2023-09-20',&#10;        time: '19:00',&#10;        guests: 4,&#10;        occasion: 'Anniversary'&#10;    });&#10;});&#10;" />
              <option name="updatedContent" value="import { render, screen, fireEvent } from &quot;@testing-library/react&quot;;&#10;import BookingForm from &quot;../components/BookingForm/BookingForm&quot;;&#10;import BookingPage from &quot;./BookingPage&quot;;&#10;import { initializeTimes, updateTimes } from &quot;./BookingPage&quot;;&#10;&#10;// Mock react-router-dom before importing BookingPage&#10;jest.mock('react-router-dom', () =&gt; ({&#10;    useNavigate: () =&gt; jest.fn(),&#10;}));&#10;&#10;// Mock the API functions&#10;const mockFetchAPI = jest.fn().mockImplementation(date =&gt; {&#10;    return [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;});&#10;&#10;const mockSubmitAPI = jest.fn().mockImplementation(formData =&gt; {&#10;    return true; // Always succeed in tests&#10;});&#10;&#10;// Set up the mock API globally for all tests&#10;beforeAll(() =&gt; {&#10;    window.fetchAPI = mockFetchAPI;&#10;    window.submitAPI = mockSubmitAPI;&#10;});&#10;&#10;// Clean up mocks after all tests&#10;afterAll(() =&gt; {&#10;    delete window.fetchAPI;&#10;    delete window.submitAPI;&#10;});&#10;&#10;// Reset mock function calls between tests&#10;beforeEach(() =&gt; {&#10;    mockFetchAPI.mockClear();&#10;    mockSubmitAPI.mockClear();&#10;});&#10;&#10;// Test that BookingPage renders with the correct heading&#10;test('Renders the BookingPage heading', () =&gt; {&#10;    render(&lt;BookingPage /&gt;);&#10;    const headingElement = screen.getByText(&quot;Reserve a table&quot;);&#10;    expect(headingElement).toBeInTheDocument();&#10;    // Verify that fetchAPI was called during initialization&#10;    expect(mockFetchAPI).toHaveBeenCalled();&#10;});&#10;&#10;// Original test for BookingForm&#10;test('Renders the BookingForm heading with times', () =&gt; {&#10;    const mockAvailableTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    const mockUpdateTimes = jest.fn();&#10;&#10;    render(&#10;        &lt;BookingForm&#10;            availableTimes={mockAvailableTimes}&#10;            updateTimes={mockUpdateTimes}&#10;        /&gt;&#10;    );&#10;    const headingElement = screen.getByLabelText(&quot;Choose reservation date&quot;);&#10;    expect(headingElement).toBeInTheDocument();&#10;})&#10;&#10;// Test for initializeTimes function&#10;test('initializeTimes returns the expected time slots from API', () =&gt; {&#10;    // Call the function&#10;    const times = initializeTimes();&#10;&#10;    // Expected array of time slots&#10;    const expectedTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;&#10;    // Check if the returned array matches the expected array&#10;    expect(times).toEqual(expectedTimes);&#10;&#10;    // Check if the array has the correct length&#10;    expect(times.length).toBe(6);&#10;&#10;    // Verify that the API was called&#10;    expect(mockFetchAPI).toHaveBeenCalled();&#10;});&#10;&#10;// Test for updateTimes function&#10;test('updateTimes returns API data when action type is dateChange', () =&gt; {&#10;    // Create a mock state&#10;    const mockState = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;];&#10;&#10;    // Create a dateChange action&#10;    const mockAction = { type: 'dateChange', date: '2023-07-15' };&#10;&#10;    // Call the function with the state and action&#10;    const newState = updateTimes(mockState, mockAction);&#10;&#10;    // Since fetchAPI returns our mock data, we should get these times&#10;    const expectedTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    expect(newState).toEqual(expectedTimes);&#10;&#10;    // Verify that the API was called with a Date object&#10;    expect(mockFetchAPI).toHaveBeenCalledWith(expect.any(Date));&#10;});&#10;&#10;// Test for form submission&#10;test('BookingForm can be submitted by user', () =&gt; {&#10;    const mockAvailableTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    const mockUpdateTimes = jest.fn();&#10;    const mockSubmit = jest.fn();&#10;&#10;    // Render form with a mock submission handler&#10;    render(&#10;        &lt;BookingForm&#10;            availableTimes={mockAvailableTimes}&#10;            updateTimes={mockUpdateTimes}&#10;            onSubmit={mockSubmit}&#10;        /&gt;&#10;    );&#10;&#10;    // Fill out form fields&#10;    const dateInput = screen.getByLabelText(&quot;Choose reservation date&quot;);&#10;    fireEvent.change(dateInput, { target: { value: '2023-09-20' } });&#10;&#10;    const timeSelect = screen.getByLabelText(&quot;Choose reservation time&quot;);&#10;    fireEvent.change(timeSelect, { target: { value: '19:00' } });&#10;&#10;    const guestsInput = screen.getByLabelText(&quot;Number of guests, minimum 1, maximum 10&quot;);&#10;    fireEvent.change(guestsInput, { target: { value: '4' } });&#10;&#10;    const occasionSelect = screen.getByLabelText(&quot;Select occasion for reservation&quot;);&#10;    fireEvent.change(occasionSelect, { target: { value: 'Anniversary' } });&#10;&#10;    // Submit the form&#10;    const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;    fireEvent.click(submitButton);&#10;&#10;    // Check if the submit handler was called&#10;    expect(mockSubmit).toHaveBeenCalledTimes(1);&#10;    // Check if it was called with the correct form data&#10;    expect(mockSubmit).toHaveBeenCalledWith({&#10;        date: '2023-09-20',&#10;        time: '19:00',&#10;        guests: 4,&#10;        occasion: 'Anniversary'&#10;    });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>