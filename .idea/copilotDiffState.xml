<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/BookingForm/BookingForm.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/BookingForm/BookingForm.js" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { Formik, Form, Field, ErrorMessage } from 'formik';&#10;import * as Yup from 'yup';&#10;&#10;// Validation schema using Yup&#10;const validationSchema = Yup.object({&#10;    date: Yup.date()&#10;        .required('Date is required')&#10;        .min(new Date(), 'Date must be today or in the future'),&#10;    time: Yup.string()&#10;        .required('Time is required'),&#10;    guests: Yup.number()&#10;        .required('Number of guests is required')&#10;        .min(1, 'Must have at least 1 guest')&#10;        .max(10, 'Cannot exceed 10 guests')&#10;        .integer('Must be a whole number'),&#10;    occasion: Yup.string()&#10;        .required('Occasion is required')&#10;});&#10;&#10;export default function BookingForm({ availableTimes, updateTimes, onSubmit }) {&#10;    const [bookings, setBookings] = useState(() =&gt; {&#10;        const stored = localStorage.getItem('bookings');&#10;        return stored ? JSON.parse(stored) : [];&#10;    });&#10;&#10;    const initialValues = {&#10;        date: '',&#10;        time: '',&#10;        guests: 1,&#10;        occasion: 'Birthday'&#10;    };&#10;&#10;    const handleFormSubmit = (values, { setSubmitting, resetForm }) =&gt; {&#10;        const newBooking = { ...values };&#10;        const updatedBookings = [...bookings, newBooking];&#10;        setBookings(updatedBookings);&#10;        localStorage.setItem('bookings', JSON.stringify(updatedBookings));&#10;&#10;        if (onSubmit) {&#10;            onSubmit(newBooking);&#10;        }&#10;&#10;        setSubmitting(false);&#10;        resetForm();&#10;    };&#10;&#10;    const handleDateChange = (date, setFieldValue) =&gt; {&#10;        setFieldValue('date', date);&#10;        setFieldValue('time', ''); // Reset time when date changes&#10;        // Dispatch date change to update availableTimes&#10;        updateTimes({ type: 'dateChange', date });&#10;    };&#10;&#10;    // Get today's date in YYYY-MM-DD format&#10;    const today = new Date().toISOString().split('T')[0];&#10;&#10;    return (&#10;        &lt;Formik&#10;            initialValues={initialValues}&#10;            validationSchema={validationSchema}&#10;            onSubmit={handleFormSubmit}&#10;        &gt;&#10;            {({ values, setFieldValue, errors, touched, isValid, isSubmitting }) =&gt; (&#10;                &lt;Form&#10;                    style={{ display: &quot;grid&quot;, maxWidth: &quot;400px&quot;, gap: &quot;20px&quot; }}&#10;                    aria-label=&quot;Table reservation form&quot;&#10;                &gt;&#10;                    &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;date&quot;&gt;Choose date&lt;/label&gt;&#10;                        &lt;Field&#10;                            type=&quot;date&quot;&#10;                            id=&quot;date&quot;&#10;                            name=&quot;date&quot;&#10;                            min={today}&#10;                            onChange={(e) =&gt; handleDateChange(e.target.value, setFieldValue)}&#10;                            value={values.date}&#10;                            aria-label=&quot;Choose reservation date&quot;&#10;                            aria-required=&quot;true&quot;&#10;                            aria-describedby=&quot;date-help&quot;&#10;                            style={{&#10;                                width: '100%',&#10;                                padding: '8px',&#10;                                border: errors.date &amp;&amp; touched.date ? '2px solid red' : '1px solid #ccc',&#10;                                borderRadius: '4px'&#10;                            }}&#10;                        /&gt;&#10;                        &lt;ErrorMessage name=&quot;date&quot; component=&quot;div&quot; style={{ color: 'red', fontSize: '14px', marginTop: '5px' }} /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;time&quot;&gt;Choose time&lt;/label&gt;&#10;                        &lt;Field&#10;                            as=&quot;select&quot;&#10;                            id=&quot;time&quot;&#10;                            name=&quot;time&quot;&#10;                            aria-label=&quot;Choose reservation time&quot;&#10;                            aria-required=&quot;true&quot;&#10;                            aria-describedby=&quot;time-help&quot;&#10;                            style={{&#10;                                width: '100%',&#10;                                padding: '8px',&#10;                                border: errors.time &amp;&amp; touched.time ? '2px solid red' : '1px solid #ccc',&#10;                                borderRadius: '4px'&#10;                            }}&#10;                        &gt;&#10;                            &lt;option value=&quot;&quot;&gt;Select a time&lt;/option&gt;&#10;                            {availableTimes.map((timeOption) =&gt; (&#10;                                &lt;option key={timeOption} value={timeOption}&gt;&#10;                                    {timeOption}&#10;                                &lt;/option&gt;&#10;                            ))}&#10;                        &lt;/Field&gt;&#10;                        &lt;ErrorMessage name=&quot;time&quot; component=&quot;div&quot; style={{ color: 'red', fontSize: '14px', marginTop: '5px' }} /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;guests&quot;&gt;Number of guests&lt;/label&gt;&#10;                        &lt;Field&#10;                            type=&quot;number&quot;&#10;                            id=&quot;guests&quot;&#10;                            name=&quot;guests&quot;&#10;                            min=&quot;1&quot;&#10;                            max=&quot;10&quot;&#10;                            aria-label=&quot;Number of guests, minimum 1, maximum 10&quot;&#10;                            aria-required=&quot;true&quot;&#10;                            aria-describedby=&quot;guests-help&quot;&#10;                            style={{&#10;                                width: '100%',&#10;                                padding: '8px',&#10;                                border: errors.guests &amp;&amp; touched.guests ? '2px solid red' : '1px solid #ccc',&#10;                                borderRadius: '4px'&#10;                            }}&#10;                        /&gt;&#10;                        &lt;ErrorMessage name=&quot;guests&quot; component=&quot;div&quot; style={{ color: 'red', fontSize: '14px', marginTop: '5px' }} /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;occasion&quot;&gt;Occasion&lt;/label&gt;&#10;                        &lt;Field&#10;                            as=&quot;select&quot;&#10;                            id=&quot;occasion&quot;&#10;                            name=&quot;occasion&quot;&#10;                            aria-label=&quot;Select occasion for reservation&quot;&#10;                            aria-describedby=&quot;occasion-help&quot;&#10;                            style={{&#10;                                width: '100%',&#10;                                padding: '8px',&#10;                                border: errors.occasion &amp;&amp; touched.occasion ? '2px solid red' : '1px solid #ccc',&#10;                                borderRadius: '4px'&#10;                            }}&#10;                        &gt;&#10;                            &lt;option value=&quot;Birthday&quot;&gt;Birthday&lt;/option&gt;&#10;                            &lt;option value=&quot;Anniversary&quot;&gt;Anniversary&lt;/option&gt;&#10;                        &lt;/Field&gt;&#10;                        &lt;ErrorMessage name=&quot;occasion&quot; component=&quot;div&quot; style={{ color: 'red', fontSize: '14px', marginTop: '5px' }} /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;button&#10;                        type=&quot;submit&quot;&#10;                        className=&quot;btn btn-primary&quot;&#10;                        aria-label=&quot;Submit reservation form&quot;&#10;                        disabled={!isValid || isSubmitting}&#10;                    &gt;&#10;                        {isSubmitting ? 'Submitting...' : 'Make Your reservation'}&#10;                    &lt;/button&gt;&#10;&#10;                    {/* Form validation summary */}&#10;                    {Object.keys(errors).length &gt; 0 &amp;&amp; Object.keys(touched).length &gt; 0 &amp;&amp; (&#10;                        &lt;div style={{&#10;                            backgroundColor: '#ffe6e6',&#10;                            border: '1px solid #ff9999',&#10;                            padding: '10px',&#10;                            borderRadius: '4px',&#10;                            color: '#cc0000'&#10;                        }}&gt;&#10;                            &lt;strong&gt;Please fix the following errors:&lt;/strong&gt;&#10;                            &lt;ul style={{ margin: '5px 0', paddingLeft: '20px' }}&gt;&#10;                                {Object.entries(errors).map(([field, error]) =&gt;&#10;                                    touched[field] &amp;&amp; &lt;li key={field}&gt;{error}&lt;/li&gt;&#10;                                )}&#10;                            &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/Form&gt;&#10;            )}&#10;        &lt;/Formik&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import React, { useState } from 'react';&#10;import { Formik, Form, Field, ErrorMessage } from 'formik';&#10;import * as Yup from 'yup';&#10;&#10;// Validation schema using Yup&#10;const validationSchema = Yup.object({&#10;    date: Yup.date()&#10;        .required('Date is required')&#10;        .min(new Date().toISOString().split('T')[0], 'Date must be today or in the future'),&#10;    time: Yup.string()&#10;        .required('Time is required'),&#10;    guests: Yup.number()&#10;        .required('Number of guests is required')&#10;        .min(1, 'Must have at least 1 guest')&#10;        .max(10, 'Cannot exceed 10 guests')&#10;        .integer('Must be a whole number'),&#10;    occasion: Yup.string()&#10;        .required('Occasion is required')&#10;});&#10;&#10;export default function BookingForm({ availableTimes, updateTimes, onSubmit }) {&#10;    const [bookings, setBookings] = useState(() =&gt; {&#10;        const stored = localStorage.getItem('bookings');&#10;        return stored ? JSON.parse(stored) : [];&#10;    });&#10;&#10;    const initialValues = {&#10;        date: '',&#10;        time: '',&#10;        guests: 1,&#10;        occasion: 'Birthday'&#10;    };&#10;&#10;    const handleFormSubmit = (values, { setSubmitting, resetForm }) =&gt; {&#10;        const newBooking = { ...values, guests: Number(values.guests) };&#10;        const updatedBookings = [...bookings, newBooking];&#10;        setBookings(updatedBookings);&#10;        localStorage.setItem('bookings', JSON.stringify(updatedBookings));&#10;&#10;        if (onSubmit) {&#10;            onSubmit(newBooking);&#10;        }&#10;&#10;        setSubmitting(false);&#10;        resetForm();&#10;    };&#10;&#10;    const handleDateChange = (date, setFieldValue) =&gt; {&#10;        setFieldValue('date', date);&#10;        setFieldValue('time', ''); // Reset time when date changes&#10;        // Dispatch date change to update availableTimes&#10;        if (updateTimes) {&#10;            updateTimes({ type: 'dateChange', date });&#10;        }&#10;    };&#10;&#10;    // Get today's date in YYYY-MM-DD format&#10;    const today = new Date().toISOString().split('T')[0];&#10;&#10;    return (&#10;        &lt;Formik&#10;            initialValues={initialValues}&#10;            validationSchema={validationSchema}&#10;            onSubmit={handleFormSubmit}&#10;            validateOnChange={true}&#10;            validateOnBlur={true}&#10;        &gt;&#10;            {({ values, setFieldValue, errors, touched, isValid, isSubmitting, dirty }) =&gt; (&#10;                &lt;Form&#10;                    style={{ display: &quot;grid&quot;, maxWidth: &quot;400px&quot;, gap: &quot;20px&quot; }}&#10;                    aria-label=&quot;Table reservation form&quot;&#10;                &gt;&#10;                    &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;date&quot;&gt;Choose date&lt;/label&gt;&#10;                        &lt;Field&#10;                            type=&quot;date&quot;&#10;                            id=&quot;date&quot;&#10;                            name=&quot;date&quot;&#10;                            min={today}&#10;                            onChange={(e) =&gt; handleDateChange(e.target.value, setFieldValue)}&#10;                            value={values.date}&#10;                            aria-label=&quot;Choose reservation date&quot;&#10;                            aria-required=&quot;true&quot;&#10;                            aria-describedby=&quot;date-help&quot;&#10;                            style={{&#10;                                width: '100%',&#10;                                padding: '8px',&#10;                                border: errors.date &amp;&amp; touched.date ? '2px solid red' : '1px solid #ccc',&#10;                                borderRadius: '4px'&#10;                            }}&#10;                        /&gt;&#10;                        &lt;ErrorMessage name=&quot;date&quot; component=&quot;div&quot; style={{ color: 'red', fontSize: '14px', marginTop: '5px' }} /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;time&quot;&gt;Choose time&lt;/label&gt;&#10;                        &lt;Field&#10;                            as=&quot;select&quot;&#10;                            id=&quot;time&quot;&#10;                            name=&quot;time&quot;&#10;                            aria-label=&quot;Choose reservation time&quot;&#10;                            aria-required=&quot;true&quot;&#10;                            aria-describedby=&quot;time-help&quot;&#10;                            style={{&#10;                                width: '100%',&#10;                                padding: '8px',&#10;                                border: errors.time &amp;&amp; touched.time ? '2px solid red' : '1px solid #ccc',&#10;                                borderRadius: '4px'&#10;                            }}&#10;                        &gt;&#10;                            &lt;option value=&quot;&quot;&gt;Select a time&lt;/option&gt;&#10;                            {availableTimes &amp;&amp; availableTimes.map((timeOption) =&gt; (&#10;                                &lt;option key={timeOption} value={timeOption}&gt;&#10;                                    {timeOption}&#10;                                &lt;/option&gt;&#10;                            ))}&#10;                        &lt;/Field&gt;&#10;                        &lt;ErrorMessage name=&quot;time&quot; component=&quot;div&quot; style={{ color: 'red', fontSize: '14px', marginTop: '5px' }} /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;guests&quot;&gt;Number of guests&lt;/label&gt;&#10;                        &lt;Field&#10;                            type=&quot;number&quot;&#10;                            id=&quot;guests&quot;&#10;                            name=&quot;guests&quot;&#10;                            min=&quot;1&quot;&#10;                            max=&quot;10&quot;&#10;                            aria-label=&quot;Number of guests, minimum 1, maximum 10&quot;&#10;                            aria-required=&quot;true&quot;&#10;                            aria-describedby=&quot;guests-help&quot;&#10;                            style={{&#10;                                width: '100%',&#10;                                padding: '8px',&#10;                                border: errors.guests &amp;&amp; touched.guests ? '2px solid red' : '1px solid #ccc',&#10;                                borderRadius: '4px'&#10;                            }}&#10;                        /&gt;&#10;                        &lt;ErrorMessage name=&quot;guests&quot; component=&quot;div&quot; style={{ color: 'red', fontSize: '14px', marginTop: '5px' }} /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div&gt;&#10;                        &lt;label htmlFor=&quot;occasion&quot;&gt;Occasion&lt;/label&gt;&#10;                        &lt;Field&#10;                            as=&quot;select&quot;&#10;                            id=&quot;occasion&quot;&#10;                            name=&quot;occasion&quot;&#10;                            aria-label=&quot;Select occasion for reservation&quot;&#10;                            aria-describedby=&quot;occasion-help&quot;&#10;                            style={{&#10;                                width: '100%',&#10;                                padding: '8px',&#10;                                border: errors.occasion &amp;&amp; touched.occasion ? '2px solid red' : '1px solid #ccc',&#10;                                borderRadius: '4px'&#10;                            }}&#10;                        &gt;&#10;                            &lt;option value=&quot;Birthday&quot;&gt;Birthday&lt;/option&gt;&#10;                            &lt;option value=&quot;Anniversary&quot;&gt;Anniversary&lt;/option&gt;&#10;                        &lt;/Field&gt;&#10;                        &lt;ErrorMessage name=&quot;occasion&quot; component=&quot;div&quot; style={{ color: 'red', fontSize: '14px', marginTop: '5px' }} /&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;button&#10;                        type=&quot;submit&quot;&#10;                        className=&quot;btn btn-primary&quot;&#10;                        aria-label=&quot;Submit reservation form&quot;&#10;                        disabled={!isValid || isSubmitting}&#10;                        style={{&#10;                            padding: '12px 24px',&#10;                            backgroundColor: (!isValid || isSubmitting) ? '#ccc' : '#495e57',&#10;                            color: 'white',&#10;                            border: 'none',&#10;                            borderRadius: '4px',&#10;                            cursor: (!isValid || isSubmitting) ? 'not-allowed' : 'pointer',&#10;                            opacity: (!isValid || isSubmitting) ? 0.6 : 1&#10;                        }}&#10;                    &gt;&#10;                        {isSubmitting ? 'Submitting...' : 'Make Your reservation'}&#10;                    &lt;/button&gt;&#10;&#10;                    {/* Form validation summary */}&#10;                    {Object.keys(errors).length &gt; 0 &amp;&amp; Object.keys(touched).length &gt; 0 &amp;&amp; (&#10;                        &lt;div style={{&#10;                            backgroundColor: '#ffe6e6',&#10;                            border: '1px solid #ff9999',&#10;                            padding: '10px',&#10;                            borderRadius: '4px',&#10;                            color: '#cc0000'&#10;                        }}&gt;&#10;                            &lt;strong&gt;Please fix the following errors:&lt;/strong&gt;&#10;                            &lt;ul style={{ margin: '5px 0', paddingLeft: '20px' }}&gt;&#10;                                {Object.entries(errors).map(([field, error]) =&gt;&#10;                                    touched[field] &amp;&amp; &lt;li key={field}&gt;{error}&lt;/li&gt;&#10;                                )}&#10;                            &lt;/ul&gt;&#10;                        &lt;/div&gt;&#10;                    )}&#10;                &lt;/Form&gt;&#10;            )}&#10;        &lt;/Formik&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/BookingForm/BookingForm.test.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/BookingForm/BookingForm.test.js" />
              <option name="originalContent" value="import React, { act } from 'react';&#10;import {render, waitFor, screen, fireEvent} from '@testing-library/react';&#10;import userEvent from '@testing-library/user-event';&#10;import BookingForm from './BookingForm';&#10;&#10;// Configure timeout for async operations&#10;const ASYNC_TIMEOUT = 1000;&#10;&#10;beforeEach(() =&gt; {&#10;    localStorage.clear();&#10;});&#10;&#10;// HTML5 Validation Tests&#10;describe('HTML5 Validation Attributes', () =&gt; {&#10;    test('date field has correct HTML5 validation attributes', () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;        expect(dateField).toHaveAttribute('type', 'date');&#10;        expect(dateField).toHaveAttribute('aria-required', 'true');&#10;        expect(dateField).toHaveAttribute('min'); // Should have today's date as minimum&#10;        expect(dateField).toHaveAttribute('id', 'date');&#10;    });&#10;&#10;    test('time field has correct HTML5 validation attributes', () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;        expect(timeField).toHaveAttribute('aria-required', 'true');&#10;        expect(timeField).toHaveAttribute('id', 'time');&#10;        expect(timeField.tagName).toBe('SELECT');&#10;    });&#10;&#10;    test('guests field has correct HTML5 validation attributes', () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        const guestsField = screen.getByLabelText(/Number of guests/i);&#10;        expect(guestsField).toHaveAttribute('type', 'number');&#10;        expect(guestsField).toHaveAttribute('min', '1');&#10;        expect(guestsField).toHaveAttribute('max', '10');&#10;        expect(guestsField).toHaveAttribute('aria-required', 'true');&#10;        expect(guestsField).toHaveAttribute('id', 'guests');&#10;    });&#10;&#10;    test('occasion field has correct HTML5 validation attributes', () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        const occasionField = screen.getByLabelText(/Select occasion/i);&#10;        expect(occasionField).toHaveAttribute('id', 'occasion');&#10;        expect(occasionField.tagName).toBe('SELECT');&#10;    });&#10;&#10;    test('date field has today as minimum date', () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;        const today = new Date().toISOString().split('T')[0];&#10;        expect(dateField).toHaveAttribute('min', today);&#10;    });&#10;});&#10;&#10;// JavaScript Validation Tests&#10;describe('JavaScript Validation Functions', () =&gt; {&#10;    describe('Date Validation', () =&gt; {&#10;        test('shows error for empty date field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date is required');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for past date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const yesterday = new Date();&#10;            yesterday.setDate(yesterday.getDate() - 1);&#10;            const pastDate = yesterday.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: pastDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date must be today or in the future');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid future date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Date must be today or in the future')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    //&#10;    describe('Time Validation', () =&gt; {&#10;        test('shows error for empty time field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Time is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid time selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.blur(timeField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Time is required')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;    //&#10;    // describe('Guests Validation', () =&gt; {&#10;    //     test('shows error for guests less than 1', async () =&gt; {&#10;    //         const user = userEvent.setup();&#10;    //         render(&#10;    //             &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    //         );&#10;    //&#10;    //         const guestsField = screen.getByLabelText(/Number of guests/i);&#10;    //&#10;    //         await user.clear(guestsField);&#10;    //         await user.type(guestsField, '0');&#10;    //         await user.tab();&#10;    //&#10;    //         await waitFor(() =&gt; {&#10;    //             expect(screen.getByText('Must have at least 1 guest')).toBeInTheDocument();&#10;    //         }, { timeout: ASYNC_TIMEOUT });&#10;    //     });&#10;    //&#10;    //     test('shows error for guests more than 10', async () =&gt; {&#10;    //         const user = userEvent.setup();&#10;    //         render(&#10;    //             &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    //         );&#10;    //&#10;    //         const guestsField = screen.getByLabelText(/Number of guests/i);&#10;    //&#10;    //         await user.clear(guestsField);&#10;    //         await user.type(guestsField, '11');&#10;    //         await user.tab();&#10;    //&#10;    //         await waitFor(() =&gt; {&#10;    //             expect(screen.getByText('Cannot exceed 10 guests')).toBeInTheDocument();&#10;    //         }, { timeout: ASYNC_TIMEOUT });&#10;    //     });&#10;    //&#10;    //     test('shows error for non-integer guest count', async () =&gt; {&#10;    //         const user = userEvent.setup();&#10;    //         render(&#10;    //             &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    //         );&#10;    //&#10;    //         const guestsField = screen.getByLabelText(/Number of guests/i);&#10;    //&#10;    //         await user.clear(guestsField);&#10;    //         await user.type(guestsField, '2.5');&#10;    //         await user.tab();&#10;    //&#10;    //         await waitFor(() =&gt; {&#10;    //             expect(screen.getByText('Must be a whole number')).toBeInTheDocument();&#10;    //         }, { timeout: ASYNC_TIMEOUT });&#10;    //     });&#10;    //&#10;    //     test('accepts valid guest count', async () =&gt; {&#10;    //         const user = userEvent.setup();&#10;    //         render(&#10;    //             &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    //         );&#10;    //&#10;    //         const guestsField = screen.getByLabelText(/Number of guests/i);&#10;    //&#10;    //         await user.clear(guestsField);&#10;    //         await user.type(guestsField, '4');&#10;    //         await user.tab();&#10;    //&#10;    //         await waitFor(() =&gt; {&#10;    //             expect(screen.queryByText('Must have at least 1 guest')).not.toBeInTheDocument();&#10;    //             expect(screen.queryByText('Cannot exceed 10 guests')).not.toBeInTheDocument();&#10;    //             expect(screen.queryByText('Must be a whole number')).not.toBeInTheDocument();&#10;    //         }, { timeout: ASYNC_TIMEOUT });&#10;    //     });&#10;    // });&#10;&#10;    // describe('Occasion Validation', () =&gt; {&#10;    //     test('accepts valid occasion selection', async () =&gt; {&#10;    //         const user = userEvent.setup();&#10;    //         render(&#10;    //             &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    //         );&#10;    //&#10;    //         const occasionField = screen.getByLabelText(/Select occasion/i);&#10;    //&#10;    //         await user.selectOptions(occasionField, 'Anniversary');&#10;    //         await user.tab();&#10;    //&#10;    //         await waitFor(() =&gt; {&#10;    //             expect(screen.queryByText('Occasion is required')).not.toBeInTheDocument();&#10;    //         }, { timeout: ASYNC_TIMEOUT });&#10;    //     });&#10;    // });&#10;    //&#10;    // describe('Form Validation States', () =&gt; {&#10;    //     test('submit button is disabled with invalid form', async () =&gt; {&#10;    //         render(&#10;    //             &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    //         );&#10;    //&#10;    //         await waitFor(() =&gt; {&#10;    //             const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;    //             expect(submitButton).toBeDisabled();&#10;    //         }, { timeout: ASYNC_TIMEOUT });&#10;    //     });&#10;    //&#10;    //     test('submit button is enabled with valid form', async () =&gt; {&#10;    //         const user = userEvent.setup();&#10;    //         render(&#10;    //             &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    //         );&#10;    //&#10;    //         const tomorrow = new Date();&#10;    //         tomorrow.setDate(tomorrow.getDate() + 1);&#10;    //         const futureDate = tomorrow.toISOString().split('T')[0];&#10;    //&#10;    //         const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;    //         const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;    //         const guestsField = screen.getByLabelText(/Number of guests/i);&#10;    //         const occasionField = screen.getByLabelText(/Select occasion/i);&#10;    //&#10;    //         await user.clear(dateField);&#10;    //         await user.type(dateField, futureDate);&#10;    //         await user.selectOptions(timeField, '18:00');&#10;    //         await user.clear(guestsField);&#10;    //         await user.type(guestsField, '4');&#10;    //         await user.selectOptions(occasionField, 'Anniversary');&#10;    //&#10;    //         await waitFor(() =&gt; {&#10;    //             const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;    //             expect(submitButton).not.toBeDisabled();&#10;    //         }, { timeout: ASYNC_TIMEOUT });&#10;    //     });&#10;    //&#10;    //     test('displays validation summary when form has errors', async () =&gt; {&#10;    //         const user = userEvent.setup();&#10;    //         render(&#10;    //             &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    //         );&#10;    //&#10;    //         const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;    //&#10;    //         await user.click(submitButton);&#10;    //&#10;    //         await waitFor(() =&gt; {&#10;    //             expect(screen.getByText('Please fix the following errors:')).toBeInTheDocument();&#10;    //         }, { timeout: ASYNC_TIMEOUT });&#10;    //     });&#10;    // });&#10;});&#10;&#10;&#10;test('initializes bookings state from localStorage', () =&gt; {&#10;    localStorage.setItem('bookings', JSON.stringify([{&#10;        date: '2025-07-28',&#10;        time: '18:00',&#10;        guests: 2,&#10;        occasion: 'Birthday'&#10;    }]));&#10;&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    expect(JSON.parse(localStorage.getItem('bookings'))).toHaveLength(1);&#10;});&#10;&#10;test('adds a booking to bookings state and localStorage on submit', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: '2025-07-28'}});&#10;    fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;    fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;    fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    // check if the button is enabled&#10;    fireEvent.click(submitButton);&#10;&#10;    // Wait for the main async operation to complete&#10;    await waitFor(() =&gt; {&#10;        expect(mockOnSubmit).toHaveBeenCalledWith({&#10;            date: '2025-07-28',&#10;            time: '18:00',&#10;            guests: 3,&#10;            occasion: 'Anniversary'&#10;        });&#10;    });&#10;&#10;    // Then check synchronous state&#10;    expect(submitButton).toBeEnabled();&#10;&#10;    const bookings = JSON.parse(localStorage.getItem('bookings'));&#10;    expect(bookings).toHaveLength(1);&#10;    expect(bookings[0]).toEqual({&#10;        date: '2025-07-28',&#10;        time: '18:00',&#10;        guests: 3,&#10;        occasion: 'Anniversary'&#10;    });&#10;});&#10;&#10;test('submit button is disabled when form is invalid', async () =&gt; {&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    await waitFor(() =&gt; {&#10;        const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;        expect(submitButton).toBeDisabled();&#10;    });&#10;});&#10;//&#10;test('submit button is enabled when form is valid', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: '2025-07-28'}});&#10;    fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;    fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;    fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    // check if the button is enabled&#10;    await waitFor(() =&gt; {&#10;        expect(submitButton).toBeEnabled();&#10;    });&#10;});&#10;&#10;test('displays validation errors for invalid inputs', async () =&gt; {&#10;    // const user = userEvent.setup();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    // fire some clicks, or focus to trigger validation&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation date/i));&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation time/i));&#10;&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(screen.getByTestId('date_error')).toBeInTheDocument();&#10;    });&#10;&#10;    expect(screen.getByTestId('time_error')).toBeInTheDocument();&#10;});" />
              <option name="updatedContent" value="import React, { act } from 'react';&#10;import {render, waitFor, screen, fireEvent} from '@testing-library/react';&#10;import userEvent from '@testing-library/user-event';&#10;import BookingForm from './BookingForm';&#10;&#10;// Configure timeout for async operations&#10;const ASYNC_TIMEOUT = 1000;&#10;&#10;beforeEach(() =&gt; {&#10;    localStorage.clear();&#10;});&#10;&#10;// HTML5 Validation Tests&#10;describe('HTML5 Validation Attributes', () =&gt; {&#10;    test('date field has correct HTML5 validation attributes', () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;        expect(dateField).toHaveAttribute('type', 'date');&#10;        expect(dateField).toHaveAttribute('aria-required', 'true');&#10;        expect(dateField).toHaveAttribute('min'); // Should have today's date as minimum&#10;        expect(dateField).toHaveAttribute('id', 'date');&#10;    });&#10;&#10;    test('time field has correct HTML5 validation attributes', () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;        expect(timeField).toHaveAttribute('aria-required', 'true');&#10;        expect(timeField).toHaveAttribute('id', 'time');&#10;        expect(timeField.tagName).toBe('SELECT');&#10;    });&#10;&#10;    test('guests field has correct HTML5 validation attributes', () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        const guestsField = screen.getByLabelText(/Number of guests/i);&#10;        expect(guestsField).toHaveAttribute('type', 'number');&#10;        expect(guestsField).toHaveAttribute('min', '1');&#10;        expect(guestsField).toHaveAttribute('max', '10');&#10;        expect(guestsField).toHaveAttribute('aria-required', 'true');&#10;        expect(guestsField).toHaveAttribute('id', 'guests');&#10;    });&#10;&#10;    test('occasion field has correct HTML5 validation attributes', () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        const occasionField = screen.getByLabelText(/Select occasion/i);&#10;        expect(occasionField).toHaveAttribute('id', 'occasion');&#10;        expect(occasionField.tagName).toBe('SELECT');&#10;    });&#10;&#10;    test('date field has today as minimum date', () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;        const today = new Date().toISOString().split('T')[0];&#10;        expect(dateField).toHaveAttribute('min', today);&#10;    });&#10;});&#10;&#10;// JavaScript Validation Tests&#10;describe('JavaScript Validation Functions', () =&gt; {&#10;    describe('Date Validation', () =&gt; {&#10;        test('shows error for empty date field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date is required');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for past date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const yesterday = new Date();&#10;            yesterday.setDate(yesterday.getDate() - 1);&#10;            const pastDate = yesterday.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: pastDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date must be today or in the future');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid future date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Date must be today or in the future')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    //&#10;    describe('Time Validation', () =&gt; {&#10;        test('shows error for empty time field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Time is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid time selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.blur(timeField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Time is required')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;    //&#10;    describe('Guests Validation', () =&gt; {&#10;        test('shows error for guests less than 1', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '0' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Must have at least 1 guest')).toBeInTheDocument();&#10;            }, { timeout: ASYNC_TIMEOUT });&#10;        });&#10;&#10;        test('shows error for guests more than 10', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '11' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Cannot exceed 10 guests')).toBeInTheDocument();&#10;            }, { timeout: ASYNC_TIMEOUT });&#10;        });&#10;&#10;        test('shows error for non-integer guest count', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '2.5' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Must be a whole number')).toBeInTheDocument();&#10;            }, { timeout: ASYNC_TIMEOUT });&#10;        });&#10;&#10;        test('accepts valid guest count', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '4' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Must have at least 1 guest')).not.toBeInTheDocument();&#10;                expect(screen.queryByText('Cannot exceed 10 guests')).not.toBeInTheDocument();&#10;                expect(screen.queryByText('Must be a whole number')).not.toBeInTheDocument();&#10;            }, { timeout: ASYNC_TIMEOUT });&#10;        });&#10;    });&#10;&#10;    describe('Occasion Validation', () =&gt; {&#10;        test('accepts valid occasion selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;&#10;            fireEvent.change(occasionField, { target: { value: 'Anniversary' } });&#10;            fireEvent.blur(occasionField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Occasion is required')).not.toBeInTheDocument();&#10;            }, { timeout: ASYNC_TIMEOUT });&#10;        });&#10;    });&#10;&#10;    describe('Form Validation States', () =&gt; {&#10;        test('submit button is disabled with invalid form', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            await waitFor(() =&gt; {&#10;                const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;                expect(submitButton).toBeDisabled();&#10;            }, { timeout: ASYNC_TIMEOUT });&#10;        });&#10;&#10;        test('submit button is enabled with valid form', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.change(guestsField, { target: { value: '4' } });&#10;            fireEvent.change(occasionField, { target: { value: 'Anniversary' } });&#10;&#10;            await waitFor(() =&gt; {&#10;                const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;                expect(submitButton).not.toBeDisabled();&#10;            }, { timeout: ASYNC_TIMEOUT });&#10;        });&#10;&#10;        test('displays validation summary when form has errors', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Please fix the following errors:')).toBeInTheDocument();&#10;            }, { timeout: ASYNC_TIMEOUT });&#10;        });&#10;    });&#10;});&#10;&#10;&#10;test('initializes bookings state from localStorage', () =&gt; {&#10;    localStorage.setItem('bookings', JSON.stringify([{&#10;        date: '2025-07-28',&#10;        time: '18:00',&#10;        guests: 2,&#10;        occasion: 'Birthday'&#10;    }]));&#10;&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    expect(JSON.parse(localStorage.getItem('bookings'))).toHaveLength(1);&#10;});&#10;&#10;test('adds a booking to bookings state and localStorage on submit', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: '2025-07-28'}});&#10;    fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;    fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;    fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    // check if the button is enabled&#10;    fireEvent.click(submitButton);&#10;&#10;    // Wait for the main async operation to complete&#10;    await waitFor(() =&gt; {&#10;        expect(mockOnSubmit).toHaveBeenCalledWith({&#10;            date: '2025-07-28',&#10;            time: '18:00',&#10;            guests: 3,&#10;            occasion: 'Anniversary'&#10;        });&#10;    });&#10;&#10;    // Then check synchronous state&#10;    expect(submitButton).toBeEnabled();&#10;&#10;    const bookings = JSON.parse(localStorage.getItem('bookings'));&#10;    expect(bookings).toHaveLength(1);&#10;    expect(bookings[0]).toEqual({&#10;        date: '2025-07-28',&#10;        time: '18:00',&#10;        guests: 3,&#10;        occasion: 'Anniversary'&#10;    });&#10;});&#10;&#10;test('submit button is disabled when form is invalid', async () =&gt; {&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    await waitFor(() =&gt; {&#10;        const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;        expect(submitButton).toBeDisabled();&#10;    });&#10;});&#10;//&#10;test('submit button is enabled when form is valid', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: '2025-07-28'}});&#10;    fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;    fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;    fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    // check if the button is enabled&#10;    await waitFor(() =&gt; {&#10;        expect(submitButton).toBeEnabled();&#10;    });&#10;});&#10;&#10;test('displays validation errors for invalid inputs', async () =&gt; {&#10;    // const user = userEvent.setup();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    // fire some clicks, or focus to trigger validation&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation date/i));&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation time/i));&#10;&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(screen.getByTestId('date_error')).toBeInTheDocument();&#10;    });&#10;&#10;    expect(screen.getByTestId('time_error')).toBeInTheDocument();&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Header/Header.test.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Header/Header.test.js" />
              <option name="originalContent" value="import { render, screen, fireEvent } from '@testing-library/react';&#10;import Header from './Header';&#10;import Nav from '../Nav/Nav';&#10;import { MemoryRouter } from 'react-router';&#10;&#10;&#10;describe('Header Component', () =&gt; {&#10;    beforeEach(() =&gt; {&#10;        jest.clearAllMocks();&#10;    });&#10;&#10;    test('should render header with logo and navigation component', () =&gt; {&#10;        render(&#10;            &lt;MemoryRouter&gt;&#10;                &lt;Header /&gt;&#10;            &lt;/MemoryRouter&gt;&#10;        );&#10;&#10;        const logo = screen.getByAltText('Little Lemon Logo');&#10;        expect(logo).toBeInTheDocument();&#10;        expect(logo).toHaveClass('header-logo');&#10;&#10;        const nav = screen.getByTestId('nav');&#10;        expect(nav).toBeInTheDocument();&#10;    });&#10;});" />
              <option name="updatedContent" value="import { render, screen, fireEvent } from '@testing-library/react';&#10;import Header from './Header';&#10;import Nav from '../Nav/Nav';&#10;import { MemoryRouter } from 'react-router';&#10;&#10;&#10;describe('Header Component', () =&gt; {&#10;    beforeEach(() =&gt; {&#10;        jest.clearAllMocks();&#10;    });&#10;&#10;    test('should render header with logo and navigation component', () =&gt; {&#10;        render(&#10;            &lt;MemoryRouter&gt;&#10;                &lt;Header /&gt;&#10;            &lt;/MemoryRouter&gt;&#10;        );&#10;&#10;        const logo = screen.getByAltText('Little Lemon Logo');&#10;        expect(logo).toBeInTheDocument();&#10;        expect(logo).toHaveClass('header-logo');&#10;&#10;        const nav = screen.getByTestId('nav');&#10;        expect(nav).toBeInTheDocument();&#10;    });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/BookingPage.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/BookingPage.js" />
              <option name="originalContent" value="/* global fetchAPI, submitAPI */&#10;import &quot;./BookingPage.css&quot;;&#10;import Main from &quot;../components/Main/Main&quot;;&#10;import BookingForm from &quot;../components/BookingForm/BookingForm&quot;;&#10;import { useReducer } from &quot;react&quot;;&#10;&#10;export function initializeTimes() {&#10;    // Get today's date&#10;    const today = new Date();&#10;    // Use the fetchAPI to get available times for today&#10;    return fetchAPI(today) || [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;}&#10;&#10;export function updateTimes(state, action) {&#10;    if (action.type === 'dateChange') {&#10;        // Convert the date string to a Date object&#10;        const selectedDate = new Date(action.date);&#10;        // Use fetchAPI to get available times for the selected date&#10;        return fetchAPI(selectedDate) || [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    }&#10;    return state;&#10;}&#10;&#10;export default function BookingPage() {&#10;    const [availableTimes, dispatch] = useReducer(updateTimes, [], initializeTimes);&#10;&#10;    const handleFormSubmit = (formData) =&gt; {&#10;        // Use the submitAPI function to submit the form data&#10;        const success = submitAPI(formData);&#10;        if (success) {&#10;            // Handle successful submission (e.g., redirect to confirmation page)&#10;            console.log('Form submitted successfully:', formData);&#10;            // In a real app, you might redirect here&#10;            // history.push('/confirmation');&#10;        } else {&#10;            // Handle submission failure&#10;            console.error('Form submission failed');&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;Main&gt;&#10;            &lt;section className=&quot;booking-page bg-secondary&quot;&gt;&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;div className=&quot;row&quot;&gt;&#10;                        &lt;div className=&quot;col-12 col-md-6&quot;&gt;&#10;                            &lt;div className=&quot;heading&quot;&gt;&#10;                                &lt;h1&gt;Reserve a table&lt;/h1&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;BookingForm&#10;                                availableTimes={availableTimes}&#10;                                updateTimes={dispatch}&#10;                                onSubmit={handleFormSubmit}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;        &lt;/Main&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="/* global fetchAPI, submitAPI */&#10;import &quot;./BookingPage.css&quot;;&#10;import Main from &quot;../components/Main/Main&quot;;&#10;import BookingForm from &quot;../components/BookingForm/BookingForm&quot;;&#10;import { useReducer } from &quot;react&quot;;&#10;import { useNavigate } from &quot;react-router-dom&quot;;&#10;&#10;export function initializeTimes() {&#10;    // Get today's date&#10;    const today = new Date();&#10;    // Use the fetchAPI to get available times for today&#10;    return fetchAPI(today) || [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;}&#10;&#10;export function updateTimes(state, action) {&#10;    if (action.type === 'dateChange') {&#10;        // Convert the date string to a Date object&#10;        const selectedDate = new Date(action.date);&#10;        // Use fetchAPI to get available times for the selected date&#10;        return fetchAPI(selectedDate) || [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    }&#10;    return state;&#10;}&#10;&#10;export default function BookingPage() {&#10;    const [availableTimes, dispatch] = useReducer(updateTimes, [], initializeTimes);&#10;    const navigate = useNavigate();&#10;&#10;    const submitForm = (formData) =&gt; {&#10;        const success = submitAPI(formData);&#10;        if (success) {&#10;            navigate(&quot;/reservations/confirmed&quot;);&#10;        } else {&#10;            console.error('Form submission failed');&#10;        }&#10;    };&#10;&#10;    return (&#10;        &lt;Main&gt;&#10;            &lt;section className=&quot;booking-page bg-secondary&quot;&gt;&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;div className=&quot;row&quot;&gt;&#10;                        &lt;div className=&quot;col-12 col-md-6&quot;&gt;&#10;                            &lt;div className=&quot;heading&quot;&gt;&#10;                                &lt;h1&gt;Reserve a table&lt;/h1&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;BookingForm&#10;                                availableTimes={availableTimes}&#10;                                updateTimes={dispatch}&#10;                                onSubmit={submitForm}&#10;                            /&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/section&gt;&#10;        &lt;/Main&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/BookingPage.test.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/BookingPage.test.js" />
              <option name="originalContent" value="import { render, screen, fireEvent } from &quot;@testing-library/react&quot;;&#10;import BookingForm from &quot;../components/BookingForm/BookingForm&quot;;&#10;import BookingPage from &quot;./BookingPage&quot;;&#10;import { initializeTimes, updateTimes } from &quot;./BookingPage&quot;;&#10;&#10;// Mock the API functions&#10;const mockFetchAPI = jest.fn().mockImplementation(date =&gt; {&#10;    return [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;});&#10;&#10;const mockSubmitAPI = jest.fn().mockImplementation(formData =&gt; {&#10;    return true; // Always succeed in tests&#10;});&#10;&#10;// Set up the mock API globally for all tests&#10;beforeAll(() =&gt; {&#10;    window.fetchAPI = mockFetchAPI;&#10;    window.submitAPI = mockSubmitAPI;&#10;});&#10;&#10;// Clean up mocks after all tests&#10;afterAll(() =&gt; {&#10;    delete window.fetchAPI;&#10;    delete window.submitAPI;&#10;});&#10;&#10;// Reset mock function calls between tests&#10;beforeEach(() =&gt; {&#10;    mockFetchAPI.mockClear();&#10;    mockSubmitAPI.mockClear();&#10;});&#10;&#10;// Test that BookingPage renders with the correct heading&#10;test('Renders the BookingPage heading', () =&gt; {&#10;    render(&lt;BookingPage /&gt;);&#10;    const headingElement = screen.getByText(&quot;Reserve a table&quot;);&#10;    expect(headingElement).toBeInTheDocument();&#10;    // Verify that fetchAPI was called during initialization&#10;    expect(mockFetchAPI).toHaveBeenCalled();&#10;});&#10;&#10;// Original test for BookingForm&#10;test('Renders the BookingForm heading with times', () =&gt; {&#10;    const mockAvailableTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    const mockUpdateTimes = jest.fn();&#10;&#10;    render(&#10;        &lt;BookingForm&#10;            availableTimes={mockAvailableTimes}&#10;            updateTimes={mockUpdateTimes}&#10;        /&gt;&#10;    );&#10;    const headingElement = screen.getByLabelText(&quot;Choose reservation date&quot;);&#10;    expect(headingElement).toBeInTheDocument();&#10;})&#10;&#10;// Test for initializeTimes function&#10;test('initializeTimes returns the expected time slots from API', () =&gt; {&#10;    // Call the function&#10;    const times = initializeTimes();&#10;&#10;    // Expected array of time slots&#10;    const expectedTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;&#10;    // Check if the returned array matches the expected array&#10;    expect(times).toEqual(expectedTimes);&#10;&#10;    // Check if the array has the correct length&#10;    expect(times.length).toBe(6);&#10;&#10;    // Verify that the API was called&#10;    expect(mockFetchAPI).toHaveBeenCalled();&#10;});&#10;&#10;// Test for updateTimes function&#10;test('updateTimes returns API data when action type is dateChange', () =&gt; {&#10;    // Create a mock state&#10;    const mockState = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;];&#10;&#10;    // Create a dateChange action&#10;    const mockAction = { type: 'dateChange', date: '2023-07-15' };&#10;&#10;    // Call the function with the state and action&#10;    const newState = updateTimes(mockState, mockAction);&#10;&#10;    // Since fetchAPI returns our mock data, we should get these times&#10;    const expectedTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    expect(newState).toEqual(expectedTimes);&#10;&#10;    // Verify that the API was called with a Date object&#10;    expect(mockFetchAPI).toHaveBeenCalledWith(expect.any(Date));&#10;});&#10;&#10;// Test for form submission&#10;test('BookingForm can be submitted by user', () =&gt; {&#10;    const mockAvailableTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    const mockUpdateTimes = jest.fn();&#10;    const mockSubmit = jest.fn();&#10;&#10;    // Render form with a mock submission handler&#10;    render(&#10;        &lt;BookingForm&#10;            availableTimes={mockAvailableTimes}&#10;            updateTimes={mockUpdateTimes}&#10;            onSubmit={mockSubmit}&#10;        /&gt;&#10;    );&#10;&#10;    // Fill out form fields&#10;    const dateInput = screen.getByLabelText(&quot;Choose reservation date&quot;);&#10;    fireEvent.change(dateInput, { target: { value: '2023-09-20' } });&#10;&#10;    const timeSelect = screen.getByLabelText(&quot;Choose reservation time&quot;);&#10;    fireEvent.change(timeSelect, { target: { value: '19:00' } });&#10;&#10;    const guestsInput = screen.getByLabelText(&quot;Number of guests, minimum 1, maximum 10&quot;);&#10;    fireEvent.change(guestsInput, { target: { value: '4' } });&#10;&#10;    const occasionSelect = screen.getByLabelText(&quot;Select occasion for reservation&quot;);&#10;    fireEvent.change(occasionSelect, { target: { value: 'Anniversary' } });&#10;&#10;    // Submit the form&#10;    const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;    fireEvent.click(submitButton);&#10;&#10;    // Check if the submit handler was called&#10;    expect(mockSubmit).toHaveBeenCalledTimes(1);&#10;    // Check if it was called with the correct form data&#10;    expect(mockSubmit).toHaveBeenCalledWith({&#10;        date: '2023-09-20',&#10;        time: '19:00',&#10;        guests: 4,&#10;        occasion: 'Anniversary'&#10;    });&#10;});&#10;" />
              <option name="updatedContent" value="import { render, screen, fireEvent } from &quot;@testing-library/react&quot;;&#10;import BookingForm from &quot;../components/BookingForm/BookingForm&quot;;&#10;import BookingPage from &quot;./BookingPage&quot;;&#10;import { initializeTimes, updateTimes } from &quot;./BookingPage&quot;;&#10;&#10;// Mock react-router-dom before importing BookingPage&#10;jest.mock('react-router-dom', () =&gt; ({&#10;    useNavigate: () =&gt; jest.fn(),&#10;}));&#10;&#10;// Mock the API functions&#10;const mockFetchAPI = jest.fn().mockImplementation(date =&gt; {&#10;    return [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;});&#10;&#10;const mockSubmitAPI = jest.fn().mockImplementation(formData =&gt; {&#10;    return true; // Always succeed in tests&#10;});&#10;&#10;// Set up the mock API globally for all tests&#10;beforeAll(() =&gt; {&#10;    window.fetchAPI = mockFetchAPI;&#10;    window.submitAPI = mockSubmitAPI;&#10;});&#10;&#10;// Clean up mocks after all tests&#10;afterAll(() =&gt; {&#10;    delete window.fetchAPI;&#10;    delete window.submitAPI;&#10;});&#10;&#10;// Reset mock function calls between tests&#10;beforeEach(() =&gt; {&#10;    mockFetchAPI.mockClear();&#10;    mockSubmitAPI.mockClear();&#10;});&#10;&#10;// Test that BookingPage renders with the correct heading&#10;test('Renders the BookingPage heading', () =&gt; {&#10;    render(&lt;BookingPage /&gt;);&#10;    const headingElement = screen.getByText(&quot;Reserve a table&quot;);&#10;    expect(headingElement).toBeInTheDocument();&#10;    // Verify that fetchAPI was called during initialization&#10;    expect(mockFetchAPI).toHaveBeenCalled();&#10;});&#10;&#10;// Original test for BookingForm&#10;test('Renders the BookingForm heading with times', () =&gt; {&#10;    const mockAvailableTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    const mockUpdateTimes = jest.fn();&#10;&#10;    render(&#10;        &lt;BookingForm&#10;            availableTimes={mockAvailableTimes}&#10;            updateTimes={mockUpdateTimes}&#10;        /&gt;&#10;    );&#10;    const headingElement = screen.getByLabelText(&quot;Choose reservation date&quot;);&#10;    expect(headingElement).toBeInTheDocument();&#10;})&#10;&#10;// Test for initializeTimes function&#10;test('initializeTimes returns the expected time slots from API', () =&gt; {&#10;    // Call the function&#10;    const times = initializeTimes();&#10;&#10;    // Expected array of time slots&#10;    const expectedTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;&#10;    // Check if the returned array matches the expected array&#10;    expect(times).toEqual(expectedTimes);&#10;&#10;    // Check if the array has the correct length&#10;    expect(times.length).toBe(6);&#10;&#10;    // Verify that the API was called&#10;    expect(mockFetchAPI).toHaveBeenCalled();&#10;});&#10;&#10;// Test for updateTimes function&#10;test('updateTimes returns API data when action type is dateChange', () =&gt; {&#10;    // Create a mock state&#10;    const mockState = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;];&#10;&#10;    // Create a dateChange action&#10;    const mockAction = { type: 'dateChange', date: '2023-07-15' };&#10;&#10;    // Call the function with the state and action&#10;    const newState = updateTimes(mockState, mockAction);&#10;&#10;    // Since fetchAPI returns our mock data, we should get these times&#10;    const expectedTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    expect(newState).toEqual(expectedTimes);&#10;&#10;    // Verify that the API was called with a Date object&#10;    expect(mockFetchAPI).toHaveBeenCalledWith(expect.any(Date));&#10;});&#10;&#10;// Test for form submission&#10;test('BookingForm can be submitted by user', () =&gt; {&#10;    const mockAvailableTimes = [&quot;17:00&quot;, &quot;18:00&quot;, &quot;19:00&quot;, &quot;20:00&quot;, &quot;21:00&quot;, &quot;22:00&quot;];&#10;    const mockUpdateTimes = jest.fn();&#10;    const mockSubmit = jest.fn();&#10;&#10;    // Render form with a mock submission handler&#10;    render(&#10;        &lt;BookingForm&#10;            availableTimes={mockAvailableTimes}&#10;            updateTimes={mockUpdateTimes}&#10;            onSubmit={mockSubmit}&#10;        /&gt;&#10;    );&#10;&#10;    // Fill out form fields&#10;    const dateInput = screen.getByLabelText(&quot;Choose reservation date&quot;);&#10;    fireEvent.change(dateInput, { target: { value: '2023-09-20' } });&#10;&#10;    const timeSelect = screen.getByLabelText(&quot;Choose reservation time&quot;);&#10;    fireEvent.change(timeSelect, { target: { value: '19:00' } });&#10;&#10;    const guestsInput = screen.getByLabelText(&quot;Number of guests, minimum 1, maximum 10&quot;);&#10;    fireEvent.change(guestsInput, { target: { value: '4' } });&#10;&#10;    const occasionSelect = screen.getByLabelText(&quot;Select occasion for reservation&quot;);&#10;    fireEvent.change(occasionSelect, { target: { value: 'Anniversary' } });&#10;&#10;    // Submit the form&#10;    const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;    fireEvent.click(submitButton);&#10;&#10;    // Check if the submit handler was called&#10;    expect(mockSubmit).toHaveBeenCalledTimes(1);&#10;    // Check if it was called with the correct form data&#10;    expect(mockSubmit).toHaveBeenCalledWith({&#10;        date: '2023-09-20',&#10;        time: '19:00',&#10;        guests: 4,&#10;        occasion: 'Anniversary'&#10;    });&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>