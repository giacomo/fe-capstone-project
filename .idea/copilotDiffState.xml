<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/components/BookingForm/BookingForm.test.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/BookingForm/BookingForm.test.js" />
              <option name="originalContent" value="import React from 'react';&#10;import {render, waitFor, screen, fireEvent, act} from '@testing-library/react';&#10;import BookingForm from './BookingForm';&#10;&#10;beforeEach(() =&gt; {&#10;    localStorage.clear();&#10;});&#10;&#10;describe('HTML5 Validation Attributes', () =&gt; {&#10;    test('date field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;        expect(dateField).toHaveAttribute('type', 'date');&#10;        expect(dateField).toHaveAttribute('aria-required', 'true');&#10;        expect(dateField).toHaveAttribute('min'); // Should have today's date as minimum&#10;        expect(dateField).toHaveAttribute('id', 'date');&#10;    });&#10;&#10;    test('time field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;        expect(timeField).toHaveAttribute('aria-required', 'true');&#10;        expect(timeField).toHaveAttribute('id', 'time');&#10;        expect(timeField.tagName).toBe('SELECT');&#10;    });&#10;&#10;    test('guests field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const guestsField = screen.getByLabelText(/Number of guests/i);&#10;        expect(guestsField).toHaveAttribute('type', 'number');&#10;        expect(guestsField).toHaveAttribute('min', '1');&#10;        expect(guestsField).toHaveAttribute('max', '10');&#10;        expect(guestsField).toHaveAttribute('aria-required', 'true');&#10;        expect(guestsField).toHaveAttribute('id', 'guests');&#10;    });&#10;&#10;    test('occasion field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await waitFor(() =&gt; {&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;            expect(occasionField).toHaveAttribute('id', 'occasion');&#10;        });&#10;&#10;        await waitFor(() =&gt; {&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;            expect(occasionField.tagName).toBe('SELECT');&#10;        });&#10;    });&#10;&#10;    test('date field has today as minimum date', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await waitFor(() =&gt; {&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const today = new Date().toISOString().split('T')[0];&#10;            expect(dateField).toHaveAttribute('min', today);&#10;        });&#10;    });&#10;});&#10;&#10;describe('JavaScript Validation Functions', () =&gt; {&#10;    describe('Date Validation', () =&gt; {&#10;        test('shows error for empty date field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date is required');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for past date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const yesterday = new Date();&#10;            yesterday.setDate(yesterday.getDate() - 1);&#10;            const pastDate = yesterday.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: pastDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date must be today or in the future');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid future date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Date must be today or in the future')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Time Validation', () =&gt; {&#10;        test('shows error for empty time field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Time is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid time selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.blur(timeField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Time is required')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Guests Validation', () =&gt; {&#10;        test('shows error for guests less than 1', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '0' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Must have at least 1 guest')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for guests more than 10', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '11' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Cannot exceed 10 guests')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for non-integer guest count', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '2.5' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Must be a whole number')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid guest count', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '4' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Must have at least 1 guest')).not.toBeInTheDocument();&#10;            });&#10;&#10;            expect(screen.queryByText('Cannot exceed 10 guests')).not.toBeInTheDocument();&#10;            expect(screen.queryByText('Must be a whole number')).not.toBeInTheDocument();&#10;        });&#10;    });&#10;&#10;    describe('Occasion Validation', () =&gt; {&#10;        test('accepts valid occasion selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;&#10;            fireEvent.change(occasionField, { target: { value: 'Anniversary' } });&#10;            fireEvent.blur(occasionField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Occasion is required')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Form Validation States', () =&gt; {&#10;        test('submit button is disabled with invalid form', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            await waitFor(() =&gt; {&#10;                const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;                expect(submitButton).toBeDisabled();&#10;            });&#10;        });&#10;&#10;        test('submit button is enabled with valid form', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.change(guestsField, { target: { value: '4' } });&#10;            fireEvent.change(occasionField, { target: { value: 'Anniversary' } });&#10;&#10;            await waitFor(() =&gt; {&#10;                const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;                expect(submitButton).not.toBeDisabled();&#10;            });&#10;        });&#10;&#10;        test('displays validation summary when form has errors', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Please fix the following errors:')).toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;});&#10;//&#10;//&#10;test('initializes bookings state from localStorage', async () =&gt; {&#10;    localStorage.setItem('bookings', JSON.stringify([{&#10;        date: '2025-07-28',&#10;        time: '18:00',&#10;        guests: 2,&#10;        occasion: 'Birthday'&#10;    }]));&#10;&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(JSON.parse(localStorage.getItem('bookings'))).toHaveLength(1);&#10;    });&#10;});&#10;&#10;test('adds a booking to bookings state and localStorage on submit', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    const tomorrow = new Date();&#10;    tomorrow.setDate(tomorrow.getDate() + 1);&#10;    const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;    fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: futureDate}});&#10;    fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;    fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;    fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    // check if the button is enabled&#10;    fireEvent.click(submitButton);&#10;&#10;    // Wait for the main async operation to complete&#10;    await waitFor(() =&gt; {&#10;        expect(mockOnSubmit).toHaveBeenCalledWith({&#10;            date: futureDate,&#10;            time: '18:00',&#10;            guests: 3,&#10;            occasion: 'Anniversary'&#10;        });&#10;    });&#10;&#10;    // Then check synchronous state&#10;    expect(submitButton).toBeEnabled();&#10;&#10;    const bookings = JSON.parse(localStorage.getItem('bookings'));&#10;    expect(bookings).toHaveLength(1);&#10;    expect(bookings[0]).toEqual({&#10;        date: futureDate,&#10;        time: '18:00',&#10;        guests: 3,&#10;        occasion: 'Anniversary'&#10;    });&#10;});&#10;&#10;test('submit button is disabled when form is invalid', async () =&gt; {&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    await waitFor(() =&gt; {&#10;        const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;        expect(submitButton).toBeDisabled();&#10;    });&#10;});&#10;&#10;test('submit button is enabled when form is valid', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: '2025-07-28'}});&#10;    fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;    fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;    fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    // check if the button is enabled&#10;    await waitFor(() =&gt; {&#10;        expect(submitButton).toBeEnabled();&#10;    });&#10;});&#10;&#10;test('displays validation errors for invalid inputs', async () =&gt; {&#10;    // const user = userEvent.setup();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    // fire some clicks, or focus to trigger validation&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation date/i));&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation time/i));&#10;&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(screen.getByTestId('date_error')).toBeInTheDocument();&#10;    });&#10;&#10;    expect(screen.getByTestId('time_error')).toBeInTheDocument();&#10;});&#10;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import {render, waitFor, screen, fireEvent, act} from '@testing-library/react';&#10;import BookingForm from './BookingForm';&#10;&#10;beforeEach(() =&gt; {&#10;    localStorage.clear();&#10;});&#10;&#10;describe('HTML5 Validation Attributes', () =&gt; {&#10;    test('date field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;        expect(dateField).toHaveAttribute('type', 'date');&#10;        expect(dateField).toHaveAttribute('aria-required', 'true');&#10;        expect(dateField).toHaveAttribute('min'); // Should have today's date as minimum&#10;        expect(dateField).toHaveAttribute('id', 'date');&#10;    });&#10;&#10;    test('time field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;        expect(timeField).toHaveAttribute('aria-required', 'true');&#10;        expect(timeField).toHaveAttribute('id', 'time');&#10;        expect(timeField.tagName).toBe('SELECT');&#10;    });&#10;&#10;    test('guests field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const guestsField = screen.getByLabelText(/Number of guests/i);&#10;        expect(guestsField).toHaveAttribute('type', 'number');&#10;        expect(guestsField).toHaveAttribute('min', '1');&#10;        expect(guestsField).toHaveAttribute('max', '10');&#10;        expect(guestsField).toHaveAttribute('aria-required', 'true');&#10;        expect(guestsField).toHaveAttribute('id', 'guests');&#10;    });&#10;&#10;    test('occasion field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await waitFor(() =&gt; {&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;            expect(occasionField).toHaveAttribute('id', 'occasion');&#10;        });&#10;&#10;        await waitFor(() =&gt; {&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;            expect(occasionField.tagName).toBe('SELECT');&#10;        });&#10;    });&#10;&#10;    test('date field has today as minimum date', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await waitFor(() =&gt; {&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const today = new Date().toISOString().split('T')[0];&#10;            expect(dateField).toHaveAttribute('min', today);&#10;        });&#10;    });&#10;&#10;    test('firstName field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;        const firstNameField = screen.getByLabelText(/First name/i);&#10;        expect(firstNameField).toHaveAttribute('type', 'text');&#10;        expect(firstNameField).toHaveAttribute('id', 'firstName');&#10;        expect(firstNameField).toHaveAttribute('aria-required', 'true');&#10;    });&#10;&#10;    test('lastName field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;        const lastNameField = screen.getByLabelText(/Last name/i);&#10;        expect(lastNameField).toHaveAttribute('type', 'text');&#10;        expect(lastNameField).toHaveAttribute('id', 'lastName');&#10;        expect(lastNameField).toHaveAttribute('aria-required', 'true');&#10;    });&#10;&#10;    test('email field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;        const emailField = screen.getByLabelText(/Email/i);&#10;        expect(emailField).toHaveAttribute('type', 'email');&#10;        expect(emailField).toHaveAttribute('id', 'email');&#10;        expect(emailField).toHaveAttribute('aria-required', 'true');&#10;    });&#10;});&#10;&#10;describe('JavaScript Validation Functions', () =&gt; {&#10;    describe('Date Validation', () =&gt; {&#10;        test('shows error for empty date field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date is required');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for past date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const yesterday = new Date();&#10;            yesterday.setDate(yesterday.getDate() - 1);&#10;            const pastDate = yesterday.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: pastDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date must be today or in the future');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid future date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Date must be today or in the future')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Time Validation', () =&gt; {&#10;        test('shows error for empty time field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Time is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid time selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.blur(timeField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Time is required')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Guests Validation', () =&gt; {&#10;        test('shows error for guests less than 1', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '0' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Must have at least 1 guest')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for guests more than 10', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '11' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Cannot exceed 10 guests')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for non-integer guest count', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '2.5' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Must be a whole number')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid guest count', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '4' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Must have at least 1 guest')).not.toBeInTheDocument();&#10;            });&#10;&#10;            expect(screen.queryByText('Cannot exceed 10 guests')).not.toBeInTheDocument();&#10;            expect(screen.queryByText('Must be a whole number')).not.toBeInTheDocument();&#10;        });&#10;    });&#10;&#10;    describe('Occasion Validation', () =&gt; {&#10;        test('accepts valid occasion selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;&#10;            fireEvent.change(occasionField, { target: { value: 'Anniversary' } });&#10;            fireEvent.blur(occasionField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Occasion is required')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('First Name Validation', () =&gt; {&#10;        test('shows error for empty first name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            fireEvent.blur(firstNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('First name is required')).toBeInTheDocument();&#10;            });&#10;        });&#10;&#10;        test('shows error for too long first name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            fireEvent.change(firstNameField, { target: { value: 'a'.repeat(51) } });&#10;            fireEvent.blur(firstNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('First name is too long')).toBeInTheDocument();&#10;            });&#10;        });&#10;&#10;        test('accepts valid first name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            fireEvent.change(firstNameField, { target: { value: 'John' } });&#10;            fireEvent.blur(firstNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('First name is required')).not.toBeInTheDocument();&#10;                expect(screen.queryByText('First name is too long')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Last Name Validation', () =&gt; {&#10;        test('shows error for empty last name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            fireEvent.blur(lastNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Last name is required')).toBeInTheDocument();&#10;            });&#10;        });&#10;&#10;        test('shows error for too long last name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            fireEvent.change(lastNameField, { target: { value: 'b'.repeat(51) } });&#10;            fireEvent.blur(lastNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Last name is too long')).toBeInTheDocument();&#10;            });&#10;        });&#10;&#10;        test('accepts valid last name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            fireEvent.change(lastNameField, { target: { value: 'Doe' } });&#10;            fireEvent.blur(lastNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Last name is required')).not.toBeInTheDocument();&#10;                expect(screen.queryByText('Last name is too long')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Email Validation', () =&gt; {&#10;        test('shows error for empty email', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            fireEvent.blur(emailField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Email is required')).toBeInTheDocument();&#10;            });&#10;        });&#10;&#10;        test('shows error for invalid email', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            fireEvent.change(emailField, { target: { value: 'not-an-email' } });&#10;            fireEvent.blur(emailField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Invalid email address')).toBeInTheDocument();&#10;            });&#10;        });&#10;&#10;        test('accepts valid email', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            fireEvent.change(emailField, { target: { value: 'john@example.com' } });&#10;            fireEvent.blur(emailField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Email is required')).not.toBeInTheDocument();&#10;                expect(screen.queryByText('Invalid email address')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Form Validation States', () =&gt; {&#10;        test('submit button is disabled with invalid form', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            await waitFor(() =&gt; {&#10;                const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;                expect(submitButton).toBeDisabled();&#10;            });&#10;        });&#10;&#10;        test('submit button is enabled with valid form', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.change(guestsField, { target: { value: '4' } });&#10;            fireEvent.change(occasionField, { target: { value: 'Anniversary' } });&#10;&#10;            await waitFor(() =&gt; {&#10;                const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;                expect(submitButton).not.toBeDisabled();&#10;            });&#10;        });&#10;&#10;        test('displays validation summary when form has errors', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Please fix the following errors:')).toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;});&#10;//&#10;//&#10;test('initializes bookings state from localStorage', async () =&gt; {&#10;    localStorage.setItem('bookings', JSON.stringify([{&#10;        date: '2025-07-28',&#10;        time: '18:00',&#10;        guests: 2,&#10;        occasion: 'Birthday'&#10;    }]));&#10;&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(JSON.parse(localStorage.getItem('bookings'))).toHaveLength(1);&#10;    });&#10;});&#10;&#10;test('adds a booking to bookings state and localStorage on submit', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    const tomorrow = new Date();&#10;    tomorrow.setDate(tomorrow.getDate() + 1);&#10;    const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;    fireEvent.change(screen.getByLabelText(/First name/i), {target: {value: 'John'}});&#10;    fireEvent.change(screen.getByLabelText(/Last name/i), {target: {value: 'Doe'}});&#10;    fireEvent.change(screen.getByLabelText(/Email/i), {target: {value: 'john@example.com'}});&#10;    fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: futureDate}});&#10;    fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;    fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;    fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    fireEvent.click(submitButton);&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(mockOnSubmit).toHaveBeenCalledWith({&#10;            firstName: 'John',&#10;            lastName: 'Doe',&#10;            email: 'john@example.com',&#10;            date: futureDate,&#10;            time: '18:00',&#10;            guests: 3,&#10;            occasion: 'Anniversary'&#10;        });&#10;    });&#10;&#10;    expect(submitButton).toBeEnabled();&#10;&#10;    const bookings = JSON.parse(localStorage.getItem('bookings'));&#10;    expect(bookings).toHaveLength(1);&#10;    expect(bookings[0]).toEqual({&#10;        firstName: 'John',&#10;        lastName: 'Doe',&#10;        email: 'john@example.com',&#10;        date: futureDate,&#10;        time: '18:00',&#10;        guests: 3,&#10;        occasion: 'Anniversary'&#10;    });&#10;});&#10;&#10;test('submit button is disabled when form is invalid', async () =&gt; {&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    await waitFor(() =&gt; {&#10;        const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;        expect(submitButton).toBeDisabled();&#10;    });&#10;});&#10;&#10;test('submit button is enabled when form is valid', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: '2025-07-28'}});&#10;    fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;    fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;    fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    // check if the button is enabled&#10;    await waitFor(() =&gt; {&#10;        expect(submitButton).toBeEnabled();&#10;    });&#10;});&#10;&#10;test('displays validation errors for invalid inputs', async () =&gt; {&#10;    // const user = userEvent.setup();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    // fire some clicks, or focus to trigger validation&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation date/i));&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation time/i));&#10;&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(screen.getByTestId('date_error')).toBeInTheDocument();&#10;    });&#10;&#10;    expect(screen.getByTestId('time_error')).toBeInTheDocument();&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/ConfirmedBookingPage.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/ConfirmedBookingPage.css" />
              <option name="originalContent" value=".confirmed-booking-page {&#10;    padding: 40px 0;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;    min-height: 60vh;&#10;    background: #f9fafb;&#10;}&#10;.confirmed-booking-page .message {&#10;    background: #fff;&#10;    border-radius: 12px;&#10;    box-shadow: 0 2px 12px rgba(0,0,0,0.07);&#10;    padding: 2rem 2.5rem;&#10;    margin-bottom: 2rem;&#10;    text-align: center;&#10;    max-width: 420px;&#10;}&#10;.confirmed-booking-page h1 {&#10;    color: #495e57;&#10;    margin-bottom: 1rem;&#10;    font-size: 2.2rem;&#10;}&#10;.confirmed-booking-page .details {&#10;    margin-top: 1.5rem;&#10;    background: #f4ce14;&#10;    border-radius: 8px;&#10;    padding: 1.2rem 1.5rem;&#10;    color: #333;&#10;    font-size: 1.1rem;&#10;    box-shadow: 0 1px 4px rgba(0,0,0,0.04);&#10;}&#10;.confirmed-booking-page .details strong {&#10;    color: #495e57;&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value=".confirmed-booking-page {&#10;    padding: 40px 0;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;    min-height: 60vh;&#10;    background: #f9fafb;&#10;}&#10;.confirmed-booking-page .message {&#10;    background: #fff;&#10;    border-radius: 12px;&#10;    box-shadow: 0 2px 12px rgba(0,0,0,0.07);&#10;    padding: 2rem 2.5rem;&#10;    margin-bottom: 2rem;&#10;    text-align: center;&#10;    max-width: 420px;&#10;}&#10;.confirmed-booking-page h1 {&#10;    color: #495e57;&#10;    margin-bottom: 1rem;&#10;    font-size: 2.2rem;&#10;}&#10;&#10;/* New modern details card styles */&#10;.details-card {&#10;    background: #fff;&#10;    border-radius: 16px;&#10;    box-shadow: 0 8px 30px rgba(0,0,0,0.12);&#10;    padding: 2rem;&#10;    max-width: 480px;&#10;    width: 100%;&#10;    margin-top: 1rem;&#10;    transition: all 0.3s ease;&#10;    animation: fadeInUp 0.5s ease-out;&#10;}&#10;&#10;.details-card h2 {&#10;    color: #495e57;&#10;    font-size: 1.5rem;&#10;    margin-bottom: 1.5rem;&#10;    border-bottom: 2px solid #f4ce14;&#10;    padding-bottom: 0.8rem;&#10;}&#10;&#10;.details-container {&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 1rem;&#10;}&#10;&#10;.details-row {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    padding: 0.8rem 0;&#10;    border-bottom: 1px solid rgba(73, 94, 87, 0.1);&#10;}&#10;&#10;.details-row:last-child {&#10;    border-bottom: none;&#10;}&#10;&#10;.details-label {&#10;    color: #495e57;&#10;    font-weight: 600;&#10;    font-size: 1.1rem;&#10;}&#10;&#10;.details-value {&#10;    color: #333;&#10;    font-weight: 400;&#10;}&#10;&#10;.delete-button {&#10;    margin-top: 2rem;&#10;    background-color: #ee5253;&#10;    color: white;&#10;    border: none;&#10;    border-radius: 8px;&#10;    padding: 0.9rem 1.5rem;&#10;    font-size: 1rem;&#10;    font-weight: 600;&#10;    cursor: pointer;&#10;    width: 100%;&#10;    transition: background-color 0.2s ease;&#10;    box-shadow: 0 4px 12px rgba(238, 82, 83, 0.15);&#10;}&#10;&#10;.delete-button:hover {&#10;    background-color: #d63031;&#10;}&#10;&#10;@keyframes fadeInUp {&#10;    from {&#10;        opacity: 0;&#10;        transform: translateY(20px);&#10;    }&#10;    to {&#10;        opacity: 1;&#10;        transform: translateY(0);&#10;    }&#10;}&#10;&#10;/* Responsiveness */&#10;@media (max-width: 768px) {&#10;    .details-card {&#10;        max-width: 90%;&#10;        padding: 1.5rem;&#10;    }&#10;    &#10;    .details-row {&#10;        flex-direction: column;&#10;        gap: 0.3rem;&#10;    }&#10;    &#10;    .details-label {&#10;        font-size: 1rem;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/ConfirmedBookingPage.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/ConfirmedBookingPage.js" />
              <option name="originalContent" value="import React, {useEffect} from &quot;react&quot;;&#10;import { useNavigate } from &quot;react-router-dom&quot;;&#10;import Main from &quot;../components/Main/Main&quot;;&#10;import &quot;./ConfirmedBookingPage.css&quot;;&#10;&#10;export default function ConfirmedBookingPage() {&#10;    const [lastBooking, setLastBooking] = React.useState(null);&#10;    const navigate = useNavigate();&#10;&#10;    useEffect(() =&gt; {&#10;        const bookings = JSON.parse(localStorage.getItem(&quot;bookings&quot;) || &quot;[]&quot;);&#10;        if (bookings.length &gt; 0) {&#10;            setLastBooking(bookings[bookings.length - 1]);&#10;        }&#10;    }, []);&#10;&#10;    const handleDelete = () =&gt; {&#10;        const bookings = JSON.parse(localStorage.getItem(&quot;bookings&quot;) || &quot;[]&quot;);&#10;        if (bookings.length &gt; 0) {&#10;            bookings.pop();&#10;            localStorage.setItem(&quot;bookings&quot;, JSON.stringify(bookings));&#10;        }&#10;        setLastBooking(null);&#10;        navigate(&quot;/reservations&quot;);&#10;    };&#10;&#10;    return (&#10;        &lt;Main&gt;&#10;            &lt;section className=&quot;confirmed-booking-page&quot;&gt;&#10;                &lt;div className=&quot;message&quot;&gt;&#10;                    &lt;h1&gt;Booking Confirmed&lt;/h1&gt;&#10;                    &lt;p&gt;Thank you for your reservation! We look forward to serving you.&lt;/p&gt;&#10;                    &lt;p&gt;If you have any questions, please contact us.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                {lastBooking &amp;&amp; (&#10;                    &lt;div className=&quot;details-card&quot;&gt;&#10;                        &lt;h2&gt;Reservation Details&lt;/h2&gt;&#10;                        &lt;div className=&quot;details-container&quot;&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Name:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.firstName} {lastBooking.lastName}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Email:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.email}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Date:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.date}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Time:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.time}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Guests:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.guests}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Occasion:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.occasion}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;button className=&quot;delete-button&quot; onClick={handleDelete}&gt;&#10;                            Cancel Reservation&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/section&gt;&#10;        &lt;/Main&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import React, {useEffect} from &quot;react&quot;;&#10;import { useNavigate } from &quot;react-router-dom&quot;;&#10;import Main from &quot;../components/Main/Main&quot;;&#10;import &quot;./ConfirmedBookingPage.css&quot;;&#10;&#10;export default function ConfirmedBookingPage() {&#10;    const [lastBooking, setLastBooking] = React.useState(null);&#10;    const navigate = useNavigate();&#10;&#10;    useEffect(() =&gt; {&#10;        const bookings = JSON.parse(localStorage.getItem(&quot;bookings&quot;) || &quot;[]&quot;);&#10;        if (bookings.length &gt; 0) {&#10;            setLastBooking(bookings[bookings.length - 1]);&#10;        } else {&#10;            // Navigate away when no bookings exist&#10;            navigate(&quot;/reservations&quot;);&#10;        }&#10;    }, [navigate]);&#10;&#10;    const handleDelete = () =&gt; {&#10;        const bookings = JSON.parse(localStorage.getItem(&quot;bookings&quot;) || &quot;[]&quot;);&#10;        if (bookings.length &gt; 0) {&#10;            bookings.pop();&#10;            localStorage.setItem(&quot;bookings&quot;, JSON.stringify(bookings));&#10;        }&#10;        setLastBooking(null);&#10;        navigate(&quot;/reservations&quot;);&#10;    };&#10;&#10;    return (&#10;        &lt;Main&gt;&#10;            &lt;section className=&quot;confirmed-booking-page&quot;&gt;&#10;                &lt;div className=&quot;message&quot;&gt;&#10;                    &lt;h1&gt;Booking Confirmed&lt;/h1&gt;&#10;                    &lt;p&gt;Thank you for your reservation! We look forward to serving you.&lt;/p&gt;&#10;                    &lt;p&gt;If you have any questions, please contact us.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                {lastBooking &amp;&amp; (&#10;                    &lt;div className=&quot;details-card&quot;&gt;&#10;                        &lt;h2&gt;Reservation Details&lt;/h2&gt;&#10;                        &lt;div className=&quot;details-container&quot;&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Name:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.firstName} {lastBooking.lastName}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Email:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.email}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Date:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.date}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Time:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.time}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Guests:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.guests}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Occasion:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.occasion}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;button className=&quot;delete-button&quot; onClick={handleDelete}&gt;&#10;                            Cancel Reservation&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/section&gt;&#10;        &lt;/Main&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>