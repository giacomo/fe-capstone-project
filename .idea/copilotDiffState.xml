<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Getting Started with Create React App&#10;&#10;This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).&#10;&#10;## Available Scripts&#10;&#10;In the project directory, you can run:&#10;&#10;### `npm start`&#10;&#10;Runs the app in the development mode.\&#10;Open [http://localhost:3000](http://localhost:3000) to view it in your browser.&#10;&#10;The page will reload when you make changes.\&#10;You may also see any lint errors in the console.&#10;&#10;### `npm test`&#10;&#10;Launches the test runner in the interactive watch mode.\&#10;See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.&#10;&#10;### `npm run build`&#10;&#10;Builds the app for production to the `build` folder.\&#10;It correctly bundles React in production mode and optimizes the build for the best performance.&#10;&#10;The build is minified and the filenames include the hashes.\&#10;Your app is ready to be deployed!&#10;&#10;See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.&#10;&#10;### `npm run eject`&#10;&#10;**Note: this is a one-way operation. Once you `eject`, you can't go back!**&#10;&#10;If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.&#10;&#10;Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.&#10;&#10;You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.&#10;&#10;## Learn More&#10;&#10;You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).&#10;&#10;To learn React, check out the [React documentation](https://reactjs.org/).&#10;&#10;### Code Splitting&#10;&#10;This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)&#10;&#10;### Analyzing the Bundle Size&#10;&#10;This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)&#10;&#10;### Making a Progressive Web App&#10;&#10;This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)&#10;&#10;### Advanced Configuration&#10;&#10;This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)&#10;&#10;### Deployment&#10;&#10;This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)&#10;&#10;### `npm run build` fails to minify&#10;&#10;This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)&#10;" />
              <option name="updatedContent" value="# Little Lemon Restaurant&#10;&#10;![Little Lemon Logo](./src/assets/logo.svg)&#10;&#10;##  Overview&#10;&#10;Little Lemon is a modern, responsive web application for a Mediterranean restaurant, allowing customers to browse the menu, learn about the restaurant, and make table reservations online.&#10;&#10;## ✨ Features&#10;&#10;- **Interactive Menu Display** - Showcase restaurant specials with beautiful images and descriptions&#10;- **Table Reservation System** - Complete booking form with validation and confirmation&#10;- **Responsive Design** - Optimized for all devices from mobile to desktop&#10;- **Testimonials Section** - Display customer reviews and ratings&#10;- **About Section** - Information about the restaurant and its chefs&#10;&#10;## ️ Technologies&#10;&#10;- **React 19** - Frontend library for building the user interface&#10;- **React Router** - For handling navigation between pages&#10;- **Formik &amp; Yup** - Form handling and validation&#10;- **CSS3** - Custom styling with responsive design principles&#10;- **Jest &amp; React Testing Library** - For component and integration testing&#10;&#10;##  Getting Started&#10;&#10;### Prerequisites&#10;&#10;- Node.js (v16 or later)&#10;- npm or yarn&#10;&#10;### Installation&#10;&#10;1. Clone the repository&#10;   ```bash&#10;   git clone https://github.com/yourusername/little-lemon.git&#10;   cd little-lemon&#10;   ```&#10;&#10;2. Install dependencies&#10;   ```bash&#10;   npm install&#10;   ```&#10;&#10;3. Start the development server&#10;   ```bash&#10;   npm start&#10;   ```&#10;   The application will open in your browser at `http://localhost:3000`.&#10;&#10;##  Usage&#10;&#10;### Home Page&#10;Browse restaurant highlights, special dishes, and testimonials from satisfied customers.&#10;&#10;### Reservations&#10;Make a table reservation by filling out the booking form with your details:&#10;- Name and contact information&#10;- Preferred date and time&#10;- Number of guests&#10;- Special occasion&#10;&#10;After submission, you'll receive a confirmation with your booking details.&#10;&#10;##  Testing&#10;&#10;Run the test suite to ensure all components work as expected:&#10;&#10;```bash&#10;npm test&#10;```&#10;&#10;The project includes tests for:&#10;- Form validation&#10;- Component rendering&#10;- User interactions&#10;- API integration&#10;&#10;##  Project Structure&#10;&#10;```&#10;src/&#10;├── assets/            # Images and static resources&#10;├── components/        # Reusable UI components&#10;│   ├── About/         # Restaurant information section&#10;│   ├── BookingForm/   # Reservation form component&#10;│   ├── Footer/        # Site footer&#10;│   ├── Header/        # Navigation and branding&#10;│   ├─��� Hero/          # Hero banner component&#10;│   ├── Main/          # Main content wrapper&#10;│   ├── MealCard/      # Menu item display&#10;│   ├── Specials/      # Featured dishes section&#10;│   └── Testimonials/  # Customer reviews section&#10;├── pages/             # Full page components&#10;│   ├── BookingPage    # Reservation page&#10;│   ├── ConfirmedBookingPage # Booking confirmation&#10;│   ├── HomePage       # Landing page&#10;│   └── NotFoundPage   # 404 error page&#10;└── App.js             # Main application component&#10;```&#10;&#10;##  Contributing&#10;&#10;Contributions are welcome! Please feel free to submit a Pull Request.&#10;&#10;1. Fork the repository&#10;2. Create your feature branch (`git checkout -b feature/amazing-feature`)&#10;3. Commit your changes (`git commit -m 'Add some amazing feature'`)&#10;4. Push to the branch (`git push origin feature/amazing-feature`)&#10;5. Open a Pull Request&#10;&#10;##  License&#10;&#10;This project is licensed under the MIT License - see the LICENSE file for details.&#10;&#10;##  Acknowledgements&#10;&#10;- Images and inspiration from the real Little Lemon restaurant&#10;- React team for the amazing framework&#10;- All contributors who have helped improve this project" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/App.test.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.test.js" />
              <option name="originalContent" value="import { render, screen } from '@testing-library/react';&#10;import React from 'react';&#10;import App from './App';&#10;&#10;jest.mock('react-router', () =&gt; ({&#10;  BrowserRouter: ({ children }) =&gt; &lt;div&gt;{children}&lt;/div&gt;,&#10;  Routes: ({ children }) =&gt; &lt;div&gt;{children}&lt;/div&gt;,&#10;  Route: ({ element }) =&gt; &lt;div&gt;{element}&lt;/div&gt;,&#10;  Link: ({ children, to }) =&gt; &lt;a href={to}&gt;{children}&lt;/a&gt;&#10;}));&#10;&#10;// Mock components used in App.js&#10;jest.mock('./components/Header/Header', () =&gt; {&#10;  return function MockHeader() { return &lt;header data-testid=&quot;mock-header&quot;&gt;Header&lt;/header&gt;; };&#10;});&#10;&#10;jest.mock('./components/Footer/Footer', () =&gt; {&#10;  return function MockFooter() { return &lt;footer data-testid=&quot;mock-footer&quot;&gt;Footer&lt;/footer&gt;; };&#10;});&#10;&#10;jest.mock('./pages/HomePage', () =&gt; {&#10;  return function MockHomePage() { return &lt;div data-testid=&quot;mock-homepage&quot;&gt;Home Page&lt;/div&gt;; };&#10;});&#10;&#10;jest.mock('./pages/BookingPage', () =&gt; {&#10;  return function MockBookingPage() { return &lt;div data-testid=&quot;mock-booking&quot;&gt;Booking Page&lt;/div&gt;; };&#10;});&#10;&#10;jest.mock('./pages/NotFoundPage', () =&gt; {&#10;  return function MockNotFoundPage() { return &lt;div data-testid=&quot;mock-notfound&quot;&gt;Not Found Page&lt;/div&gt;; };&#10;});&#10;&#10;&#10;test('renders app without crashing', () =&gt; {&#10;  render(&lt;App /&gt;);&#10;  expect(document.body).toBeInTheDocument();&#10;});&#10;" />
              <option name="updatedContent" value="import { render, screen } from '@testing-library/react';&#10;import React from 'react';&#10;import App from './App';&#10;&#10;jest.mock('react-router', () =&gt; ({&#10;  BrowserRouter: ({ children }) =&gt; &lt;div&gt;{children}&lt;/div&gt;,&#10;  Routes: ({ children }) =&gt; &lt;div&gt;{children}&lt;/div&gt;,&#10;  Route: ({ element }) =&gt; &lt;div&gt;{element}&lt;/div&gt;,&#10;  Link: ({ children, to }) =&gt; &lt;a href={to}&gt;{children}&lt;/a&gt;&#10;}));&#10;&#10;// Mock components used in App.js&#10;jest.mock('./components/Header/Header', () =&gt; {&#10;  return function MockHeader() { return &lt;header data-testid=&quot;mock-header&quot;&gt;Header&lt;/header&gt;; };&#10;});&#10;&#10;jest.mock('./components/Footer/Footer', () =&gt; {&#10;  return function MockFooter() { return &lt;footer data-testid=&quot;mock-footer&quot;&gt;Footer&lt;/footer&gt;; };&#10;});&#10;&#10;jest.mock('./pages/HomePage', () =&gt; {&#10;  return function MockHomePage() { return &lt;div data-testid=&quot;mock-homepage&quot;&gt;Home Page&lt;/div&gt;; };&#10;});&#10;&#10;jest.mock('./pages/BookingPage', () =&gt; {&#10;  return function MockBookingPage() { return &lt;div data-testid=&quot;mock-booking&quot;&gt;Booking Page&lt;/div&gt;; };&#10;});&#10;&#10;jest.mock('./pages/NotFoundPage', () =&gt; {&#10;  return function MockNotFoundPage() { return &lt;div data-testid=&quot;mock-notfound&quot;&gt;Not Found Page&lt;/div&gt;; };&#10;});&#10;&#10;&#10;test('renders app without crashing', () =&gt; {&#10;  render(&lt;App /&gt;);&#10;  expect(document.body).toBeInTheDocument();&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/BookingForm/BookingForm.test.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/BookingForm/BookingForm.test.js" />
              <option name="originalContent" value="import React from 'react';&#10;import {render, waitFor, screen, fireEvent, act} from '@testing-library/react';&#10;import BookingForm from './BookingForm';&#10;&#10;beforeEach(() =&gt; {&#10;    localStorage.clear();&#10;});&#10;&#10;describe('HTML5 Validation Attributes', () =&gt; {&#10;    test('date field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;        expect(dateField).toHaveAttribute('type', 'date');&#10;        expect(dateField).toHaveAttribute('aria-required', 'true');&#10;        expect(dateField).toHaveAttribute('min'); // Should have today's date as minimum&#10;        expect(dateField).toHaveAttribute('id', 'date');&#10;    });&#10;&#10;    test('time field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;        expect(timeField).toHaveAttribute('aria-required', 'true');&#10;        expect(timeField).toHaveAttribute('id', 'time');&#10;        expect(timeField.tagName).toBe('SELECT');&#10;    });&#10;&#10;    test('guests field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const guestsField = screen.getByLabelText(/Number of guests/i);&#10;        expect(guestsField).toHaveAttribute('type', 'number');&#10;        expect(guestsField).toHaveAttribute('min', '1');&#10;        expect(guestsField).toHaveAttribute('max', '10');&#10;        expect(guestsField).toHaveAttribute('aria-required', 'true');&#10;        expect(guestsField).toHaveAttribute('id', 'guests');&#10;    });&#10;&#10;    test('occasion field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await waitFor(() =&gt; {&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;            expect(occasionField).toHaveAttribute('id', 'occasion');&#10;        });&#10;&#10;        await waitFor(() =&gt; {&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;            expect(occasionField.tagName).toBe('SELECT');&#10;        });&#10;    });&#10;&#10;    test('date field has today as minimum date', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await waitFor(() =&gt; {&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const today = new Date().toISOString().split('T')[0];&#10;            expect(dateField).toHaveAttribute('min', today);&#10;        });&#10;    });&#10;&#10;    test('firstName field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;        const firstNameField = screen.getByLabelText(/First name/i);&#10;        expect(firstNameField).toHaveAttribute('type', 'text');&#10;        expect(firstNameField).toHaveAttribute('id', 'firstName');&#10;        expect(firstNameField).toHaveAttribute('aria-required', 'true');&#10;    });&#10;&#10;    test('lastName field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;        const lastNameField = screen.getByLabelText(/Last name/i);&#10;        expect(lastNameField).toHaveAttribute('type', 'text');&#10;        expect(lastNameField).toHaveAttribute('id', 'lastName');&#10;        expect(lastNameField).toHaveAttribute('aria-required', 'true');&#10;    });&#10;&#10;    test('email field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;        const emailField = screen.getByLabelText(/Email/i);&#10;        expect(emailField).toHaveAttribute('type', 'email');&#10;        expect(emailField).toHaveAttribute('id', 'email');&#10;        expect(emailField).toHaveAttribute('aria-required', 'true');&#10;    });&#10;});&#10;&#10;describe('JavaScript Validation Functions', () =&gt; {&#10;    describe('Date Validation', () =&gt; {&#10;        test('shows error for empty date field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date is required');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for past date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const yesterday = new Date();&#10;            yesterday.setDate(yesterday.getDate() - 1);&#10;            const pastDate = yesterday.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: pastDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date must be today or in the future');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid future date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Date must be today or in the future')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Time Validation', () =&gt; {&#10;        test('shows error for empty time field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Time is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid time selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.blur(timeField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Time is required')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Guests Validation', () =&gt; {&#10;        test('shows error for guests less than 1', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '0' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Must have at least 1 guest')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for guests more than 10', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '11' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Cannot exceed 10 guests')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for non-integer guest count', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '2.5' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Must be a whole number')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid guest count', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '4' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Must have at least 1 guest')).not.toBeInTheDocument();&#10;            });&#10;&#10;            expect(screen.queryByText('Cannot exceed 10 guests')).not.toBeInTheDocument();&#10;            expect(screen.queryByText('Must be a whole number')).not.toBeInTheDocument();&#10;        });&#10;    });&#10;&#10;    describe('Occasion Validation', () =&gt; {&#10;        test('accepts valid occasion selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;&#10;            fireEvent.change(occasionField, { target: { value: 'Anniversary' } });&#10;            fireEvent.blur(occasionField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Occasion is required')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('First Name Validation', () =&gt; {&#10;        test('shows error for empty first name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            fireEvent.blur(firstNameField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('First name is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for too long first name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            fireEvent.change(firstNameField, { target: { value: 'a'.repeat(51) } });&#10;            fireEvent.blur(firstNameField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('First name is too long')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid first name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            fireEvent.change(firstNameField, { target: { value: 'John' } });&#10;            fireEvent.blur(firstNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('First name is required')).not.toBeInTheDocument();&#10;            });&#10;&#10;            expect(screen.queryByText('First name is too long')).not.toBeInTheDocument();&#10;        });&#10;    });&#10;&#10;    describe('Last Name Validation', () =&gt; {&#10;        test('shows error for empty last name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            fireEvent.blur(lastNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Last name is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for too long last name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            fireEvent.change(lastNameField, { target: { value: 'b'.repeat(51) } });&#10;            fireEvent.blur(lastNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Last name is too long')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid last name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            fireEvent.change(lastNameField, { target: { value: 'Doe' } });&#10;            fireEvent.blur(lastNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Last name is required')).not.toBeInTheDocument();&#10;            });&#10;&#10;            expect(screen.queryByText('Last name is too long')).not.toBeInTheDocument();&#10;        });&#10;    });&#10;&#10;    describe('Email Validation', () =&gt; {&#10;        test('shows error for empty email', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            fireEvent.blur(emailField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Email is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for invalid email', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            fireEvent.change(emailField, { target: { value: 'not-an-email' } });&#10;            fireEvent.blur(emailField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Invalid email address')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid email', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            fireEvent.change(emailField, { target: { value: 'john@example.com' } });&#10;            fireEvent.blur(emailField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Email is required')).not.toBeInTheDocument();&#10;            });&#10;&#10;            expect(screen.queryByText('Invalid email address')).not.toBeInTheDocument();&#10;        });&#10;    });&#10;&#10;    describe('Form Validation States', () =&gt; {&#10;        test('submit button is disabled with invalid form', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            await waitFor(() =&gt; {&#10;                const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;                expect(submitButton).toBeDisabled();&#10;            });&#10;        });&#10;&#10;        test('submit button is enabled with valid form', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;&#10;            fireEvent.change(firstNameField, { target: { value: 'John' } });&#10;            fireEvent.change(lastNameField, { target: { value: 'Doe' } });&#10;            fireEvent.change(emailField, { target: { value: 'info@johndoe.com' } });&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.change(guestsField, { target: { value: '4' } });&#10;            fireEvent.change(occasionField, { target: { value: 'Anniversary' } });&#10;&#10;            await waitFor(() =&gt; {&#10;                const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;                expect(submitButton).not.toBeDisabled();&#10;            });&#10;        });&#10;&#10;        test('displays validation summary when form has errors', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Please fix the following errors:')).toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;});&#10;//&#10;//&#10;test('initializes bookings state from localStorage', async () =&gt; {&#10;    localStorage.setItem('bookings', JSON.stringify([{&#10;        date: '2025-07-28',&#10;        time: '18:00',&#10;        guests: 2,&#10;        occasion: 'Birthday'&#10;    }]));&#10;&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(JSON.parse(localStorage.getItem('bookings'))).toHaveLength(1);&#10;    });&#10;});&#10;&#10;test('adds a booking to bookings state and localStorage on submit', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    const tomorrow = new Date();&#10;    tomorrow.setDate(tomorrow.getDate() + 1);&#10;    const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;&#10;&#10;    act(() =&gt; {&#10;        fireEvent.change(screen.getByLabelText(/First name/i), {target: {value: 'John'}});&#10;        fireEvent.change(screen.getByLabelText(/Last name/i), {target: {value: 'Doe'}});&#10;        fireEvent.change(screen.getByLabelText(/Email/i), {target: {value: 'john@example.com'}});&#10;        fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: futureDate}});&#10;        fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;        fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;        fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    });&#10;&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    fireEvent.click(submitButton);&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(mockOnSubmit).toHaveBeenCalledWith({&#10;            firstName: 'John',&#10;            lastName: 'Doe',&#10;            email: 'john@example.com',&#10;            date: futureDate,&#10;            time: '18:00',&#10;            guests: 3,&#10;            occasion: 'Anniversary'&#10;        });&#10;    });&#10;&#10;    expect(submitButton).toBeEnabled();&#10;&#10;    const bookings = JSON.parse(localStorage.getItem('bookings'));&#10;    expect(bookings).toHaveLength(1);&#10;    expect(bookings[0]).toEqual({&#10;        firstName: 'John',&#10;        lastName: 'Doe',&#10;        email: 'john@example.com',&#10;        date: futureDate,&#10;        time: '18:00',&#10;        guests: 3,&#10;        occasion: 'Anniversary'&#10;    });&#10;});&#10;&#10;test('submit button is disabled when form is invalid', async () =&gt; {&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    await waitFor(() =&gt; {&#10;        const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;        expect(submitButton).toBeDisabled();&#10;    });&#10;});&#10;&#10;test('submit button is enabled when form is valid', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: '2025-07-28'}});&#10;    fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;    fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;    fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    // check if the button is enabled&#10;    await waitFor(() =&gt; {&#10;        expect(submitButton).toBeEnabled();&#10;    });&#10;});&#10;&#10;test('displays validation errors for invalid inputs', async () =&gt; {&#10;    // const user = userEvent.setup();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    // fire some clicks, or focus to trigger validation&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation date/i));&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation time/i));&#10;&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(screen.getByTestId('date_error')).toBeInTheDocument();&#10;    });&#10;&#10;    expect(screen.getByTestId('time_error')).toBeInTheDocument();&#10;});&#10;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import {render, waitFor, screen, fireEvent, act} from '@testing-library/react';&#10;import BookingForm from './BookingForm';&#10;&#10;beforeEach(() =&gt; {&#10;    localStorage.clear();&#10;});&#10;&#10;describe('HTML5 Validation Attributes', () =&gt; {&#10;    test('date field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;        expect(dateField).toHaveAttribute('type', 'date');&#10;        expect(dateField).toHaveAttribute('aria-required', 'true');&#10;        expect(dateField).toHaveAttribute('min'); // Should have today's date as minimum&#10;        expect(dateField).toHaveAttribute('id', 'date');&#10;    });&#10;&#10;    test('time field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;        expect(timeField).toHaveAttribute('aria-required', 'true');&#10;        expect(timeField).toHaveAttribute('id', 'time');&#10;        expect(timeField.tagName).toBe('SELECT');&#10;    });&#10;&#10;    test('guests field has correct HTML5 validation attributes', async () =&gt; {&#10;        const promise = Promise.resolve();&#10;&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await act(() =&gt; promise);&#10;&#10;        const guestsField = screen.getByLabelText(/Number of guests/i);&#10;        expect(guestsField).toHaveAttribute('type', 'number');&#10;        expect(guestsField).toHaveAttribute('min', '1');&#10;        expect(guestsField).toHaveAttribute('max', '10');&#10;        expect(guestsField).toHaveAttribute('aria-required', 'true');&#10;        expect(guestsField).toHaveAttribute('id', 'guests');&#10;    });&#10;&#10;    test('occasion field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await waitFor(() =&gt; {&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;            expect(occasionField).toHaveAttribute('id', 'occasion');&#10;        });&#10;&#10;        await waitFor(() =&gt; {&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;            expect(occasionField.tagName).toBe('SELECT');&#10;        });&#10;    });&#10;&#10;    test('date field has today as minimum date', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;&#10;        await waitFor(() =&gt; {&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const today = new Date().toISOString().split('T')[0];&#10;            expect(dateField).toHaveAttribute('min', today);&#10;        });&#10;    });&#10;&#10;    test('firstName field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;        const firstNameField = screen.getByLabelText(/First name/i);&#10;        expect(firstNameField).toHaveAttribute('type', 'text');&#10;        expect(firstNameField).toHaveAttribute('id', 'firstName');&#10;        expect(firstNameField).toHaveAttribute('aria-required', 'true');&#10;    });&#10;&#10;    test('lastName field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;        const lastNameField = screen.getByLabelText(/Last name/i);&#10;        expect(lastNameField).toHaveAttribute('type', 'text');&#10;        expect(lastNameField).toHaveAttribute('id', 'lastName');&#10;        expect(lastNameField).toHaveAttribute('aria-required', 'true');&#10;    });&#10;&#10;    test('email field has correct HTML5 validation attributes', async () =&gt; {&#10;        render(&#10;            &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;        );&#10;        const emailField = screen.getByLabelText(/Email/i);&#10;        expect(emailField).toHaveAttribute('type', 'email');&#10;        expect(emailField).toHaveAttribute('id', 'email');&#10;        expect(emailField).toHaveAttribute('aria-required', 'true');&#10;    });&#10;});&#10;&#10;describe('JavaScript Validation Functions', () =&gt; {&#10;    describe('Date Validation', () =&gt; {&#10;        test('shows error for empty date field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date is required');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for past date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const yesterday = new Date();&#10;            yesterday.setDate(yesterday.getDate() - 1);&#10;            const pastDate = yesterday.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: pastDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                const dateErrors = screen.getAllByText('Date must be today or in the future');&#10;                expect(dateErrors).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid future date', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.blur(dateField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Date must be today or in the future')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Time Validation', () =&gt; {&#10;        test('shows error for empty time field', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Time is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid time selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.blur(timeField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Time is required')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('Guests Validation', () =&gt; {&#10;        test('shows error for guests less than 1', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '0' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Must have at least 1 guest')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for guests more than 10', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '11' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Cannot exceed 10 guests')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for non-integer guest count', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '2.5' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Must be a whole number')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid guest count', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;&#10;            fireEvent.change(guestsField, { target: { value: '4' } });&#10;            fireEvent.blur(guestsField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Must have at least 1 guest')).not.toBeInTheDocument();&#10;            });&#10;&#10;            expect(screen.queryByText('Cannot exceed 10 guests')).not.toBeInTheDocument();&#10;            expect(screen.queryByText('Must be a whole number')).not.toBeInTheDocument();&#10;        });&#10;    });&#10;&#10;    describe('Occasion Validation', () =&gt; {&#10;        test('accepts valid occasion selection', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;&#10;            fireEvent.change(occasionField, { target: { value: 'Anniversary' } });&#10;            fireEvent.blur(occasionField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Occasion is required')).not.toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;&#10;    describe('First Name Validation', () =&gt; {&#10;        test('shows error for empty first name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            fireEvent.blur(firstNameField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('First name is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for too long first name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            fireEvent.change(firstNameField, { target: { value: 'a'.repeat(51) } });&#10;            fireEvent.blur(firstNameField);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('First name is too long')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid first name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            fireEvent.change(firstNameField, { target: { value: 'John' } });&#10;            fireEvent.blur(firstNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('First name is required')).not.toBeInTheDocument();&#10;            });&#10;&#10;            expect(screen.queryByText('First name is too long')).not.toBeInTheDocument();&#10;        });&#10;    });&#10;&#10;    describe('Last Name Validation', () =&gt; {&#10;        test('shows error for empty last name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            fireEvent.blur(lastNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Last name is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for too long last name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            fireEvent.change(lastNameField, { target: { value: 'b'.repeat(51) } });&#10;            fireEvent.blur(lastNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Last name is too long')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid last name', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            fireEvent.change(lastNameField, { target: { value: 'Doe' } });&#10;            fireEvent.blur(lastNameField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Last name is required')).not.toBeInTheDocument();&#10;            });&#10;&#10;            expect(screen.queryByText('Last name is too long')).not.toBeInTheDocument();&#10;        });&#10;    });&#10;&#10;    describe('Email Validation', () =&gt; {&#10;        test('shows error for empty email', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            fireEvent.blur(emailField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Email is required')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('shows error for invalid email', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            fireEvent.change(emailField, { target: { value: 'not-an-email' } });&#10;            fireEvent.blur(emailField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getAllByText('Invalid email address')).toHaveLength(2);&#10;            });&#10;        });&#10;&#10;        test('accepts valid email', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            fireEvent.change(emailField, { target: { value: 'john@example.com' } });&#10;            fireEvent.blur(emailField);&#10;            await waitFor(() =&gt; {&#10;                expect(screen.queryByText('Email is required')).not.toBeInTheDocument();&#10;            });&#10;&#10;            expect(screen.queryByText('Invalid email address')).not.toBeInTheDocument();&#10;        });&#10;    });&#10;&#10;    describe('Form Validation States', () =&gt; {&#10;        test('submit button is disabled with invalid form', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            await waitFor(() =&gt; {&#10;                const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;                expect(submitButton).toBeDisabled();&#10;            });&#10;        });&#10;&#10;        test('submit button is enabled with valid form', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const tomorrow = new Date();&#10;            tomorrow.setDate(tomorrow.getDate() + 1);&#10;            const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;            const firstNameField = screen.getByLabelText(/First name/i);&#10;            const lastNameField = screen.getByLabelText(/Last name/i);&#10;            const emailField = screen.getByLabelText(/Email/i);&#10;            const dateField = screen.getByLabelText(/Choose reservation date/i);&#10;            const timeField = screen.getByLabelText(/Choose reservation time/i);&#10;            const guestsField = screen.getByLabelText(/Number of guests/i);&#10;            const occasionField = screen.getByLabelText(/Select occasion/i);&#10;&#10;            fireEvent.change(firstNameField, { target: { value: 'John' } });&#10;            fireEvent.change(lastNameField, { target: { value: 'Doe' } });&#10;            fireEvent.change(emailField, { target: { value: 'info@johndoe.com' } });&#10;            fireEvent.change(dateField, { target: { value: futureDate } });&#10;            fireEvent.change(timeField, { target: { value: '18:00' } });&#10;            fireEvent.change(guestsField, { target: { value: '4' } });&#10;            fireEvent.change(occasionField, { target: { value: 'Anniversary' } });&#10;&#10;            await waitFor(() =&gt; {&#10;                const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;                expect(submitButton).not.toBeDisabled();&#10;            });&#10;        });&#10;&#10;        test('displays validation summary when form has errors', async () =&gt; {&#10;            render(&#10;                &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;            );&#10;&#10;            const submitButton = screen.getByRole('button', { name: /submit reservation form/i });&#10;&#10;            fireEvent.click(submitButton);&#10;&#10;            await waitFor(() =&gt; {&#10;                expect(screen.getByText('Please fix the following errors:')).toBeInTheDocument();&#10;            });&#10;        });&#10;    });&#10;});&#10;//&#10;//&#10;test('initializes bookings state from localStorage', async () =&gt; {&#10;    localStorage.setItem('bookings', JSON.stringify([{&#10;        date: '2025-07-28',&#10;        time: '18:00',&#10;        guests: 2,&#10;        occasion: 'Birthday'&#10;    }]));&#10;&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(JSON.parse(localStorage.getItem('bookings'))).toHaveLength(1);&#10;    });&#10;});&#10;&#10;test('adds a booking to bookings state and localStorage on submit', async () =&gt; {&#10;    localStorage.clear();&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    const tomorrow = new Date();&#10;    tomorrow.setDate(tomorrow.getDate() + 1);&#10;    const futureDate = tomorrow.toISOString().split('T')[0];&#10;&#10;    // Fill out the form fields&#10;    await act(async () =&gt; {&#10;        fireEvent.change(screen.getByLabelText(/First name/i), {target: {value: 'John'}});&#10;        fireEvent.blur(screen.getByLabelText(/First name/i));&#10;        &#10;        fireEvent.change(screen.getByLabelText(/Last name/i), {target: {value: 'Doe'}});&#10;        fireEvent.blur(screen.getByLabelText(/Last name/i));&#10;        &#10;        fireEvent.change(screen.getByLabelText(/Email/i), {target: {value: 'john@example.com'}});&#10;        fireEvent.blur(screen.getByLabelText(/Email/i));&#10;        &#10;        fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: futureDate}});&#10;        fireEvent.blur(screen.getByLabelText(/Choose date/i));&#10;        &#10;        fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;        fireEvent.blur(screen.getByLabelText(/Choose reservation time/i));&#10;        &#10;        fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;        fireEvent.blur(screen.getByLabelText(/Number of guests/i));&#10;        &#10;        fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;        fireEvent.blur(screen.getByLabelText(/Select occasion/i));&#10;    });&#10;&#10;    // Wait for validation to complete and form to become valid&#10;    await waitFor(() =&gt; {&#10;        const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;        expect(submitButton).not.toBeDisabled();&#10;    });&#10;&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    fireEvent.click(submitButton);&#10;&#10;    // Wait for submission to complete&#10;    await waitFor(() =&gt; {&#10;        expect(mockOnSubmit).toHaveBeenCalledWith({&#10;            firstName: 'John',&#10;            lastName: 'Doe',&#10;            email: 'john@example.com',&#10;            date: futureDate,&#10;            time: '18:00',&#10;            guests: 3,&#10;            occasion: 'Anniversary'&#10;        });&#10;    });&#10;&#10;    // Verify localStorage was updated&#10;    const bookings = JSON.parse(localStorage.getItem('bookings'));&#10;    expect(bookings).toHaveLength(1);&#10;    expect(bookings[0]).toEqual({&#10;        firstName: 'John',&#10;        lastName: 'Doe',&#10;        email: 'john@example.com',&#10;        date: futureDate,&#10;        time: '18:00',&#10;        guests: 3,&#10;        occasion: 'Anniversary'&#10;    });&#10;});&#10;&#10;test('submit button is disabled when form is invalid', async () =&gt; {&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    await waitFor(() =&gt; {&#10;        const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;        expect(submitButton).toBeDisabled();&#10;    });&#10;});&#10;&#10;test('submit button is enabled when form is valid', async () =&gt; {&#10;    const mockOnSubmit = jest.fn();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {&#10;        }} onSubmit={mockOnSubmit}/&gt;&#10;    );&#10;&#10;    fireEvent.change(screen.getByLabelText(/Choose date/i), {target: {value: '2025-07-28'}});&#10;    fireEvent.change(screen.getByLabelText(/Choose reservation time/i), {target: {value: '18:00'}});&#10;    fireEvent.change(screen.getByLabelText(/Number of guests/i), {target: {value: '3'}});&#10;    fireEvent.change(screen.getByLabelText(/Select occasion/i), {target: {value: 'Anniversary'}});&#10;    const submitButton = screen.getByRole('button', {name: /submit reservation form/i});&#10;    // check if the button is enabled&#10;    await waitFor(() =&gt; {&#10;        expect(submitButton).toBeEnabled();&#10;    });&#10;});&#10;&#10;test('displays validation errors for invalid inputs', async () =&gt; {&#10;    // const user = userEvent.setup();&#10;    render(&#10;        &lt;BookingForm availableTimes={['18:00']} updateTimes={() =&gt; {}} onSubmit={() =&gt; {}} /&gt;&#10;    );&#10;&#10;    // fire some clicks, or focus to trigger validation&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation date/i));&#10;    fireEvent.blur(screen.getByLabelText(/Choose reservation time/i));&#10;&#10;&#10;    await waitFor(() =&gt; {&#10;        expect(screen.getByTestId('date_error')).toBeInTheDocument();&#10;    });&#10;&#10;    expect(screen.getByTestId('time_error')).toBeInTheDocument();&#10;});&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/ConfirmedBookingPage.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/ConfirmedBookingPage.css" />
              <option name="originalContent" value=".confirmed-booking-page {&#10;    padding: 40px 0;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;    min-height: 60vh;&#10;    background: #f9fafb;&#10;}&#10;.confirmed-booking-page .message {&#10;    background: #fff;&#10;    border-radius: 12px;&#10;    box-shadow: 0 2px 12px rgba(0,0,0,0.07);&#10;    padding: 2rem 2.5rem;&#10;    margin-bottom: 2rem;&#10;    text-align: center;&#10;    max-width: 420px;&#10;}&#10;.confirmed-booking-page h1 {&#10;    color: #495e57;&#10;    margin-bottom: 1rem;&#10;    font-size: 2.2rem;&#10;}&#10;.confirmed-booking-page .details {&#10;    margin-top: 1.5rem;&#10;    background: #f4ce14;&#10;    border-radius: 8px;&#10;    padding: 1.2rem 1.5rem;&#10;    color: #333;&#10;    font-size: 1.1rem;&#10;    box-shadow: 0 1px 4px rgba(0,0,0,0.04);&#10;}&#10;.confirmed-booking-page .details strong {&#10;    color: #495e57;&#10;}&#10;&#10;&#10;" />
              <option name="updatedContent" value=".confirmed-booking-page {&#10;    padding: 40px 0;&#10;    display: flex;&#10;    flex-direction: column;&#10;    align-items: center;&#10;    min-height: 60vh;&#10;    background: #f9fafb;&#10;}&#10;.confirmed-booking-page .message {&#10;    background: #fff;&#10;    border-radius: 12px;&#10;    box-shadow: 0 2px 12px rgba(0,0,0,0.07);&#10;    padding: 2rem 2.5rem;&#10;    margin-bottom: 2rem;&#10;    text-align: center;&#10;    max-width: 420px;&#10;}&#10;.confirmed-booking-page h1 {&#10;    color: #495e57;&#10;    margin-bottom: 1rem;&#10;    font-size: 2.2rem;&#10;}&#10;&#10;/* New modern details card styles */&#10;.details-card {&#10;    background: #fff;&#10;    border-radius: 16px;&#10;    box-shadow: 0 8px 30px rgba(0,0,0,0.12);&#10;    padding: 2rem;&#10;    max-width: 480px;&#10;    width: 100%;&#10;    margin-top: 1rem;&#10;    transition: all 0.3s ease;&#10;    animation: fadeInUp 0.5s ease-out;&#10;}&#10;&#10;.details-card h2 {&#10;    color: #495e57;&#10;    font-size: 1.5rem;&#10;    margin-bottom: 1.5rem;&#10;    border-bottom: 2px solid #f4ce14;&#10;    padding-bottom: 0.8rem;&#10;}&#10;&#10;.details-container {&#10;    display: flex;&#10;    flex-direction: column;&#10;    gap: 1rem;&#10;}&#10;&#10;.details-row {&#10;    display: flex;&#10;    justify-content: space-between;&#10;    padding: 0.8rem 0;&#10;    border-bottom: 1px solid rgba(73, 94, 87, 0.1);&#10;}&#10;&#10;.details-row:last-child {&#10;    border-bottom: none;&#10;}&#10;&#10;.details-label {&#10;    color: #495e57;&#10;    font-weight: 600;&#10;    font-size: 1.1rem;&#10;}&#10;&#10;.details-value {&#10;    color: #333;&#10;    font-weight: 400;&#10;}&#10;&#10;.delete-button {&#10;    margin-top: 2rem;&#10;    background-color: #ee5253;&#10;    color: white;&#10;    border: none;&#10;    border-radius: 8px;&#10;    padding: 0.9rem 1.5rem;&#10;    font-size: 1rem;&#10;    font-weight: 600;&#10;    cursor: pointer;&#10;    width: 100%;&#10;    transition: background-color 0.2s ease;&#10;    box-shadow: 0 4px 12px rgba(238, 82, 83, 0.15);&#10;}&#10;&#10;.delete-button:hover {&#10;    background-color: #d63031;&#10;}&#10;&#10;@keyframes fadeInUp {&#10;    from {&#10;        opacity: 0;&#10;        transform: translateY(20px);&#10;    }&#10;    to {&#10;        opacity: 1;&#10;        transform: translateY(0);&#10;    }&#10;}&#10;&#10;/* Responsiveness */&#10;@media (max-width: 768px) {&#10;    .details-card {&#10;        max-width: 90%;&#10;        padding: 1.5rem;&#10;    }&#10;    &#10;    .details-row {&#10;        flex-direction: column;&#10;        gap: 0.3rem;&#10;    }&#10;    &#10;    .details-label {&#10;        font-size: 1rem;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/ConfirmedBookingPage.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/ConfirmedBookingPage.js" />
              <option name="originalContent" value="import React, {useEffect} from &quot;react&quot;;&#10;import { useNavigate } from &quot;react-router&quot;;&#10;import Main from &quot;../components/Main/Main&quot;;&#10;import &quot;./ConfirmedBookingPage.css&quot;;&#10;&#10;export default function ConfirmedBookingPage() {&#10;    const [lastBooking, setLastBooking] = React.useState(null);&#10;    const navigate = useNavigate();&#10;&#10;    useEffect(() =&gt; {&#10;        const bookings = JSON.parse(localStorage.getItem(&quot;bookings&quot;) || &quot;[]&quot;);&#10;        if (bookings.length &gt; 0) {&#10;            setLastBooking(bookings[bookings.length - 1]);&#10;        } else {&#10;            // Navigate away when no bookings exist&#10;            navigate(&quot;/reservations&quot;);&#10;        }&#10;    }, [navigate]);&#10;&#10;    const handleDelete = () =&gt; {&#10;        const bookings = JSON.parse(localStorage.getItem(&quot;bookings&quot;) || &quot;[]&quot;);&#10;        if (bookings.length &gt; 0) {&#10;            bookings.pop();&#10;            localStorage.setItem(&quot;bookings&quot;, JSON.stringify(bookings));&#10;        }&#10;        setLastBooking(null);&#10;        navigate(&quot;/reservations&quot;);&#10;    };&#10;&#10;    return (&#10;        &lt;Main&gt;&#10;            &lt;section className=&quot;confirmed-booking-page&quot;&gt;&#10;                &lt;div className=&quot;message&quot;&gt;&#10;                    &lt;h1&gt;Booking Confirmed&lt;/h1&gt;&#10;                    &lt;p&gt;Thank you for your reservation! We look forward to serving you.&lt;/p&gt;&#10;                    &lt;p&gt;If you have any questions, please contact us.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                {lastBooking &amp;&amp; (&#10;                    &lt;div className=&quot;details-card&quot;&gt;&#10;                        &lt;h2&gt;Reservation Details&lt;/h2&gt;&#10;                        &lt;div className=&quot;details-container&quot;&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Name:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.firstName} {lastBooking.lastName}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Email:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.email}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Date:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.date}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Time:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.time}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Guests:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.guests}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Occasion:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.occasion}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;button className=&quot;delete-button&quot; onClick={handleDelete}&gt;&#10;                            Cancel Reservation&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/section&gt;&#10;        &lt;/Main&gt;&#10;    );&#10;}" />
              <option name="updatedContent" value="import React, {useEffect} from &quot;react&quot;;&#10;import { useNavigate } from &quot;react-router&quot;;&#10;import Main from &quot;../components/Main/Main&quot;;&#10;import &quot;./ConfirmedBookingPage.css&quot;;&#10;&#10;export default function ConfirmedBookingPage() {&#10;    const [lastBooking, setLastBooking] = React.useState(null);&#10;    const navigate = useNavigate();&#10;&#10;    useEffect(() =&gt; {&#10;        const bookings = JSON.parse(localStorage.getItem(&quot;bookings&quot;) || &quot;[]&quot;);&#10;        if (bookings.length &gt; 0) {&#10;            setLastBooking(bookings[bookings.length - 1]);&#10;        } else {&#10;            // Navigate away when no bookings exist&#10;            navigate(&quot;/reservations&quot;);&#10;        }&#10;    }, [navigate]);&#10;&#10;    const handleDelete = () =&gt; {&#10;        const bookings = JSON.parse(localStorage.getItem(&quot;bookings&quot;) || &quot;[]&quot;);&#10;        if (bookings.length &gt; 0) {&#10;            bookings.pop();&#10;            localStorage.setItem(&quot;bookings&quot;, JSON.stringify(bookings));&#10;        }&#10;        setLastBooking(null);&#10;        navigate(&quot;/reservations&quot;);&#10;    };&#10;&#10;    return (&#10;        &lt;Main&gt;&#10;            &lt;section className=&quot;confirmed-booking-page&quot;&gt;&#10;                &lt;div className=&quot;message&quot;&gt;&#10;                    &lt;h1&gt;Booking Confirmed&lt;/h1&gt;&#10;                    &lt;p&gt;Thank you for your reservation! We look forward to serving you.&lt;/p&gt;&#10;                    &lt;p&gt;If you have any questions, please contact us.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                {lastBooking &amp;&amp; (&#10;                    &lt;div className=&quot;details-card&quot;&gt;&#10;                        &lt;h2&gt;Reservation Details&lt;/h2&gt;&#10;                        &lt;div className=&quot;details-container&quot;&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Name:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.firstName} {lastBooking.lastName}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Email:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.email}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Date:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.date}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Time:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.time}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Guests:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.guests}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;div className=&quot;details-row&quot;&gt;&#10;                                &lt;span className=&quot;details-label&quot;&gt;Occasion:&lt;/span&gt;&#10;                                &lt;span className=&quot;details-value&quot;&gt;{lastBooking.occasion}&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;button className=&quot;delete-button&quot; onClick={handleDelete}&gt;&#10;                            Cancel Reservation&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;            &lt;/section&gt;&#10;        &lt;/Main&gt;&#10;    );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>